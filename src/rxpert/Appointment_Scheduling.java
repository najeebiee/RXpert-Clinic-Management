/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rxpert;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author najx
 */
public class Appointment_Scheduling extends javax.swing.JFrame {
private final String appointmentFilePath = "src/maeclinicapp/appointments.json";
 private final String patientFilePath = "src/maeclinicapp/patient.json";
   private List<JSONObject> patientList = new ArrayList<>();
    /**
     * Creates new form Appointment_Scheduling
     */
    public Appointment_Scheduling() {
       initComponents();
        customInit();
        loadAppointments(); // Load appointments when the frame initializes
        addEditAppointmentFunctionality();
        jButton8.addActionListener(e -> addAppointment()); // Submit button for adding appointment
        jButton4.addActionListener(e -> updateAppointment()); // Update button for editing appointment
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        sideBarPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        DashboardButton = new javax.swing.JButton();
        PatientManagementButton = new javax.swing.JButton();
        AppointmentButton = new javax.swing.JButton();
        PatientRecordsButton = new javax.swing.JButton();
        BillingButton = new javax.swing.JButton();
        TaskButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jCheckBox4 = new javax.swing.JCheckBox();
        jButton8 = new javax.swing.JButton();
        jLabel41 = new javax.swing.JLabel();
        jComboBox16 = new javax.swing.JComboBox<>();
        jComboBox17 = new javax.swing.JComboBox<>();
        jComboBox18 = new javax.swing.JComboBox<>();
        jComboBox19 = new javax.swing.JComboBox<>();
        jComboBox20 = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton4 = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jComboBox11 = new javax.swing.JComboBox<>();
        jComboBox12 = new javax.swing.JComboBox<>();
        jComboBox13 = new javax.swing.JComboBox<>();
        jComboBox14 = new javax.swing.JComboBox<>();
        jComboBox15 = new javax.swing.JComboBox<>();
        jLabel23 = new javax.swing.JLabel();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.X_AXIS));

        sideBarPanel.setBackground(new java.awt.Color(0, 204, 204));
        sideBarPanel.setForeground(new java.awt.Color(255, 255, 255));
        sideBarPanel.setMaximumSize(new java.awt.Dimension(250, 1050));
        sideBarPanel.setMinimumSize(new java.awt.Dimension(250, 1024));
        sideBarPanel.setPreferredSize(new java.awt.Dimension(250, 1024));
        sideBarPanel.setLayout(new javax.swing.BoxLayout(sideBarPanel, javax.swing.BoxLayout.Y_AXIS));

        jLabel1.setFont(new java.awt.Font("Helvetica Rounded", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("   RXpert");
        jLabel1.setMaximumSize(new java.awt.Dimension(250, 150));
        jLabel1.setMinimumSize(new java.awt.Dimension(250, 150));
        jLabel1.setPreferredSize(new java.awt.Dimension(250, 150));
        sideBarPanel.add(jLabel1);

        DashboardButton.setBackground(new java.awt.Color(0, 204, 204));
        DashboardButton.setFont(new java.awt.Font("Poppins", 0, 16)); // NOI18N
        DashboardButton.setForeground(new java.awt.Color(255, 255, 255));
        DashboardButton.setText("Dashboard");
        DashboardButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        DashboardButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DashboardButton.setMaximumSize(new java.awt.Dimension(250, 50));
        sideBarPanel.add(DashboardButton);

        PatientManagementButton.setBackground(new java.awt.Color(0, 204, 204));
        PatientManagementButton.setFont(new java.awt.Font("Poppins", 0, 16)); // NOI18N
        PatientManagementButton.setForeground(new java.awt.Color(255, 255, 255));
        PatientManagementButton.setText("Patient Management");
        PatientManagementButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        PatientManagementButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PatientManagementButton.setMaximumSize(new java.awt.Dimension(250, 50));
        sideBarPanel.add(PatientManagementButton);

        AppointmentButton.setBackground(new java.awt.Color(0, 204, 204));
        AppointmentButton.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        AppointmentButton.setForeground(new java.awt.Color(255, 255, 255));
        AppointmentButton.setText("Appointment Scheduling");
        AppointmentButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        AppointmentButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        AppointmentButton.setMaximumSize(new java.awt.Dimension(250, 50));
        sideBarPanel.add(AppointmentButton);

        PatientRecordsButton.setBackground(new java.awt.Color(0, 204, 204));
        PatientRecordsButton.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        PatientRecordsButton.setForeground(new java.awt.Color(255, 255, 255));
        PatientRecordsButton.setText("Patient Records");
        PatientRecordsButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        PatientRecordsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PatientRecordsButton.setMaximumSize(new java.awt.Dimension(250, 50));
        sideBarPanel.add(PatientRecordsButton);

        BillingButton.setBackground(new java.awt.Color(0, 204, 204));
        BillingButton.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        BillingButton.setForeground(new java.awt.Color(255, 255, 255));
        BillingButton.setText("Billing Services");
        BillingButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        BillingButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BillingButton.setMaximumSize(new java.awt.Dimension(250, 50));
        sideBarPanel.add(BillingButton);

        TaskButton.setBackground(new java.awt.Color(0, 204, 204));
        TaskButton.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        TaskButton.setForeground(new java.awt.Color(255, 255, 255));
        TaskButton.setText("Task Management");
        TaskButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        TaskButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        TaskButton.setMaximumSize(new java.awt.Dimension(250, 50));
        sideBarPanel.add(TaskButton);

        getContentPane().add(sideBarPanel);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setMinimumSize(new java.awt.Dimension(0, 50));
        jPanel2.setPreferredSize(new java.awt.Dimension(1328, 50));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jPanel4.setBackground(new java.awt.Color(252, 255, 246));
        jPanel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(50, 50, 50, 50));

        jTabbedPane1.setBackground(new java.awt.Color(38, 198, 218));
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setFont(new java.awt.Font("Poppins", 0, 16)); // NOI18N

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));

        jLabel33.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(102, 102, 102));
        jLabel33.setText("Select Patient");

        jLabel34.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(102, 102, 102));
        jLabel34.setText("Patient ID");

        jLabel35.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(102, 102, 102));
        jLabel35.setText("Date of Appointment");

        jTextField11.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jTextField11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jTextField11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField11ActionPerformed(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(102, 102, 102));
        jLabel36.setText("Select Doctor");

        jLabel37.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(102, 102, 102));
        jLabel37.setText("Time Slot");

        jTextField12.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jTextField12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jTextField12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField12ActionPerformed(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(102, 102, 102));
        jLabel38.setText("Department");

        jLabel39.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(102, 102, 102));
        jLabel39.setText("Medical History");

        jLabel40.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(102, 102, 102));
        jLabel40.setText("Problem");

        jTextField14.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jTextField14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jTextField14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField14ActionPerformed(evt);
            }
        });

        jCheckBox4.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox4.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jCheckBox4.setForeground(new java.awt.Color(102, 102, 102));
        jCheckBox4.setText("Please Confirm");
        jCheckBox4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(0, 204, 204));
        jButton8.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("Submit");
        jButton8.setBorder(null);
        jButton8.setMinimumSize(new java.awt.Dimension(100, 40));
        jButton8.setPreferredSize(new java.awt.Dimension(100, 40));

        jLabel41.setBackground(new java.awt.Color(255, 255, 153));
        jLabel41.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(255, 102, 102));
        jLabel41.setText("      Please Fill Up All the Form");
        jLabel41.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 102), 1, true));
        jLabel41.setOpaque(true);

        jComboBox16.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jComboBox16.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jComboBox16.setMinimumSize(new java.awt.Dimension(104, 40));
        jComboBox16.setPreferredSize(new java.awt.Dimension(104, 40));
        jComboBox16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox16ActionPerformed(evt);
            }
        });

        jComboBox17.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jComboBox17.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jComboBox17.setMinimumSize(new java.awt.Dimension(104, 40));
        jComboBox17.setOpaque(true);
        jComboBox17.setPreferredSize(new java.awt.Dimension(104, 40));

        jComboBox18.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jComboBox18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jComboBox18.setMinimumSize(new java.awt.Dimension(104, 40));
        jComboBox18.setPreferredSize(new java.awt.Dimension(104, 40));

        jComboBox19.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jComboBox19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jComboBox19.setMinimumSize(new java.awt.Dimension(104, 40));
        jComboBox19.setPreferredSize(new java.awt.Dimension(104, 40));

        jComboBox20.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jComboBox20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jComboBox20.setMinimumSize(new java.awt.Dimension(104, 40));
        jComboBox20.setPreferredSize(new java.awt.Dimension(104, 40));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel33)
                            .addComponent(jLabel35)
                            .addComponent(jTextField11, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                            .addComponent(jLabel37)
                            .addComponent(jComboBox16, 0, 550, Short.MAX_VALUE)
                            .addComponent(jComboBox19, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel38)
                            .addComponent(jLabel36)
                            .addComponent(jLabel34)
                            .addComponent(jComboBox17, 0, 550, Short.MAX_VALUE)
                            .addComponent(jComboBox18, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox20, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jTextField12)
                    .addComponent(jTextField14)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel39))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jCheckBox4)
                        .addGap(35, 35, 35)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(28, 28, 28))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel36)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)))
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(jLabel38))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox16, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addComponent(jLabel40)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox4)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(" Add Apointment", jPanel5);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jTable1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jTable1.setForeground(new java.awt.Color(102, 102, 102));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Department", "Doctor Name", "Appointment Date", "Time Slot", "Token Number"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setBackground(new java.awt.Color(38, 198, 218));
        jButton2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(38, 198, 218));
        jButton2.setText("Previous");
        jButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(38, 198, 218));
        jButton3.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(38, 198, 218));
        jButton3.setText("Next");
        jButton3.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setForeground(new java.awt.Color(38, 198, 218));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("2");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel12.setOpaque(true);

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setForeground(new java.awt.Color(38, 198, 218));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("3");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel13.setOpaque(true);

        jLabel14.setBackground(new java.awt.Color(38, 198, 218));
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("1");
        jLabel14.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel14.setOpaque(true);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1188, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jButton3)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );

        jTabbedPane1.addTab("All Apointments", jPanel6);

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));

        jLabel7.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Select Patient");

        jLabel15.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(102, 102, 102));
        jLabel15.setText("Patient ID");

        jLabel16.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(102, 102, 102));
        jLabel16.setText("Date of Appointment");

        jTextField5.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jTextField5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(102, 102, 102));
        jLabel17.setText("Select Doctor");

        jLabel18.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(102, 102, 102));
        jLabel18.setText("Time Slot");

        jTextField7.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jTextField7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(102, 102, 102));
        jLabel19.setText("Department");

        jLabel20.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(102, 102, 102));
        jLabel20.setText("Medical History");

        jLabel21.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(102, 102, 102));
        jLabel21.setText("Problem");

        jTextField10.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jTextField10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });

        jCheckBox2.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox2.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jCheckBox2.setForeground(new java.awt.Color(102, 102, 102));
        jCheckBox2.setText("Please Confirm");
        jCheckBox2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 204, 204));
        jButton4.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Update");
        jButton4.setBorder(null);
        jButton4.setMinimumSize(new java.awt.Dimension(100, 40));
        jButton4.setPreferredSize(new java.awt.Dimension(100, 40));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel22.setBackground(new java.awt.Color(255, 255, 153));
        jLabel22.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 102, 102));
        jLabel22.setText("      Please Fill Up All the Form");
        jLabel22.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 102), 1, true));
        jLabel22.setOpaque(true);

        jComboBox11.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jComboBox11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jComboBox11.setMinimumSize(new java.awt.Dimension(104, 40));
        jComboBox11.setPreferredSize(new java.awt.Dimension(104, 40));

        jComboBox12.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jComboBox12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jComboBox12.setMinimumSize(new java.awt.Dimension(104, 40));
        jComboBox12.setOpaque(true);
        jComboBox12.setPreferredSize(new java.awt.Dimension(104, 40));

        jComboBox13.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jComboBox13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jComboBox13.setMinimumSize(new java.awt.Dimension(104, 40));
        jComboBox13.setPreferredSize(new java.awt.Dimension(104, 40));

        jComboBox14.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jComboBox14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jComboBox14.setMinimumSize(new java.awt.Dimension(104, 40));
        jComboBox14.setPreferredSize(new java.awt.Dimension(104, 40));

        jComboBox15.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jComboBox15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jComboBox15.setMinimumSize(new java.awt.Dimension(104, 40));
        jComboBox15.setPreferredSize(new java.awt.Dimension(104, 40));

        jLabel23.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(102, 102, 102));
        jLabel23.setText("(Select Patient First)");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel23))
                            .addComponent(jLabel16)
                            .addComponent(jTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                            .addComponent(jLabel18)
                            .addComponent(jComboBox11, 0, 550, Short.MAX_VALUE)
                            .addComponent(jComboBox14, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel19)
                            .addComponent(jLabel17)
                            .addComponent(jLabel15)
                            .addComponent(jComboBox12, 0, 550, Short.MAX_VALUE)
                            .addComponent(jComboBox13, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox15, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jTextField7)
                    .addComponent(jTextField10)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jCheckBox2)
                        .addGap(35, 35, 35)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(28, 28, 28))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Edit Apointment", jPanel7);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 214, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField10ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jTextField11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField11ActionPerformed

    private void jTextField12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField12ActionPerformed

    private void jTextField14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField14ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboBox16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox16ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox16ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Appointment_Scheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Appointment_Scheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Appointment_Scheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Appointment_Scheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Appointment_Scheduling().setVisible(true);
            }
        });
    }
    
  private void customInit() {
      
        setExtendedState(JFrame.MAXIMIZED_BOTH);  // Make the frame full screen
        
        // Load patients from patient.json
        loadPatientsIntoComboBoxes();

        // Initialize other combo boxes
        jComboBox16.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"09:00-10:00", "10:00-11:00", "11:00-12:00", "13:00-14:00"}));
        jComboBox18.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Cardiology", "Neurology", "Pediatrics"}));
        jComboBox20.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Dr. Adams", "Dr. Brown", "Dr. Clark"}));
        jComboBox11.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"09:00-10:00", "10:00-11:00", "11:00-12:00", "13:00-14:00"}));
        jComboBox13.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Cardiology", "Neurology", "Pediatrics"}));
        jComboBox15.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Dr. Adams", "Dr. Brown", "Dr. Clark"}));

        jLabel1.setBackground(Color.white);
        jTabbedPane1.setFont(new Font("Poppins", Font.BOLD, 16));

        javax.swing.table.TableColumnModel columnModel = jTable1.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(150);
        columnModel.getColumn(1).setPreferredWidth(100);
        columnModel.getColumn(2).setPreferredWidth(100);
        columnModel.getColumn(3).setPreferredWidth(100);
        columnModel.getColumn(4).setPreferredWidth(100);
        columnModel.getColumn(5).setPreferredWidth(100);
        jTable1.setRowHeight(40);

        DashboardButton.addActionListener(e -> DashboardButton(e));
        PatientManagementButton.addActionListener(e -> PatientManagementButton(e));
        PatientRecordsButton.addActionListener(e -> PatientRecordsButton(e));
        BillingButton.addActionListener(e -> BillingButton(e));

        setTabSize(jTabbedPane1, 0, new Dimension(175, 30));
        setTabSize(jTabbedPane1, 1, new Dimension(175, 30));
        setTabSize(jTabbedPane1, 2, new Dimension(175, 30));
        jTabbedPane1.revalidate();
        jTabbedPane1.repaint();

        applyGradient(sideBarPanel, new Color(0x26C6DA), new Color(0x92FFCD), false);

        setButtonBG(DashboardButton, AppointmentButton, PatientRecordsButton, PatientManagementButton, TaskButton, BillingButton);

        revalidate();
        repaint();
    }

    private void loadPatientsIntoComboBoxes() {
        try (FileReader reader = new FileReader(patientFilePath)) {
            JSONParser parser = new JSONParser();
            JSONObject jsonObject = (JSONObject) parser.parse(reader);
            JSONArray patients = (JSONArray) jsonObject.get("patientList");

            patientList.clear();
            List<String> patientNames = new ArrayList<>();
            List<String> patientIds = new ArrayList<>();

            if (patients != null) {
                for (Object obj : patients) {
                    JSONObject patient = (JSONObject) obj;
                    String id = patient.get("id") != null ? patient.get("id").toString() : "";
                    String name = patient.get("name") != null ? patient.get("name").toString() : "";
                    if (!id.isEmpty() && !name.isEmpty()) {
                        patientList.add(patient);
                        patientNames.add(name);
                        patientIds.add(id);
                    }
                }
            }

            // Update combo boxes for Add Appointment
            jComboBox19.setModel(new javax.swing.DefaultComboBoxModel<>(patientNames.toArray(new String[0])));
            jComboBox17.setModel(new javax.swing.DefaultComboBoxModel<>(patientIds.toArray(new String[0])));

            // Update combo boxes for Edit Appointment
            jComboBox14.setModel(new javax.swing.DefaultComboBoxModel<>(patientNames.toArray(new String[0])));
            jComboBox12.setModel(new javax.swing.DefaultComboBoxModel<>(patientIds.toArray(new String[0])));

            // Set default selection
            if (!patientNames.isEmpty()) {
                jComboBox19.setSelectedIndex(0);
                jComboBox17.setSelectedIndex(0);
                jComboBox14.setSelectedIndex(0);
                jComboBox12.setSelectedIndex(0);
            }
        } catch (IOException | ParseException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading patient data.");
        }
    }

    private void addAppointment() {
        if (!jCheckBox4.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please confirm the appointment details.");
            return;
        }

        String patientName = (String) jComboBox19.getSelectedItem();
        String patientId = (String) jComboBox17.getSelectedItem();
        String department = (String) jComboBox18.getSelectedItem();
        String doctorName = (String) jComboBox20.getSelectedItem();
        String appointmentDate = jTextField11.getText().trim();
        String timeSlot = (String) jComboBox16.getSelectedItem();
        String problem = jTextField12.getText().trim();
        String medicalHistory = jTextField14.getText().trim();

        if (patientName == null || patientId == null || department == null || doctorName == null ||
            appointmentDate.isEmpty() || timeSlot == null || problem.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields.");
            return;
        }

        // Validate patient ID and name consistency
        boolean validPatient = false;
        for (JSONObject patient : patientList) {
            if (patient.get("name").toString().equals(patientName) && patient.get("id").toString().equals(patientId)) {
                validPatient = true;
                break;
            }
        }
        if (!validPatient) {
            JOptionPane.showMessageDialog(this, "Selected patient name and ID do not match.");
            return;
        }

        if (!timeSlot.matches("\\d{2}:\\d{2}-\\d{2}:\\d{2}")) {
            JOptionPane.showMessageDialog(this, "Invalid time slot format. Please select a valid time slot (e.g., 09:00-10:00).");
            return;
        }

        if (!appointmentDate.matches("\\d{4}-\\d{2}-\\d{2}")) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use YYYY-MM-DD.");
            return;
        }

        File file = new File(appointmentFilePath);
        JSONObject jsonObject = new JSONObject();
        JSONArray appointments = new JSONArray();

        if (file.exists() && file.length() > 0) {
            try (FileReader reader = new FileReader(file)) {
                JSONParser parser = new JSONParser();
                jsonObject = (JSONObject) parser.parse(reader);
                appointments = (JSONArray) jsonObject.get("appointments");
                if (appointments == null) {
                    appointments = new JSONArray();
                }
            } catch (IOException | ParseException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error reading appointment records.");
                return;
            }
        }

        JSONObject appointment = new JSONObject();
        appointment.put("id", String.valueOf(appointments.size() + 1));
        appointment.put("patientName", patientName);
        appointment.put("patientId", patientId);
        appointment.put("department", department);
        appointment.put("doctorName", doctorName);
        appointment.put("appointmentDate", appointmentDate);
        appointment.put("timeSlot", timeSlot);
        appointment.put("problem", problem);
        appointment.put("medicalHistory", medicalHistory);
        appointment.put("tokenNumber", generateTokenNumber());
        appointment.put("nurseId", "N001");
        appointment.put("doctorId", "Doctor1");
        appointment.put("appointmentTime", formatAppointmentTime(appointmentDate, timeSlot));

        appointments.add(appointment);
        jsonObject.put("appointments", appointments);

        try (FileWriter writer = new FileWriter(file)) {
            writer.write(jsonObject.toJSONString());
            writer.flush();
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error saving appointment record.");
            return;
        }

        clearAddAppointmentFields();
        JOptionPane.showMessageDialog(this, "Appointment added successfully!");
        loadAppointments();
    }

    private void clearAddAppointmentFields() {
        jTextField11.setText("");
        jTextField12.setText("");
        jTextField14.setText("");
        jComboBox16.setSelectedIndex(0);
        jComboBox17.setSelectedIndex(0);
        jComboBox18.setSelectedIndex(0);
        jComboBox19.setSelectedIndex(0);
        jComboBox20.setSelectedIndex(0);
        jCheckBox4.setSelected(false);
    }

    private void loadAppointments() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        try (FileReader reader = new FileReader(appointmentFilePath)) {
            JSONParser parser = new JSONParser();
            JSONObject jsonObject = (JSONObject) parser.parse(reader);
            JSONArray appointments = (JSONArray) jsonObject.get("appointments");

            if (appointments != null) {
                for (Object obj : appointments) {
                    JSONObject appointment = (JSONObject) obj;
                    model.addRow(new Object[]{
                        appointment.get("patientName"),
                        appointment.get("department"),
                        appointment.get("doctorName"),
                        appointment.get("appointmentDate"),
                        appointment.get("timeSlot"),
                        appointment.get("tokenNumber")
                    });
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void addEditAppointmentFunctionality() {
        jComboBox14.addActionListener(e -> {
            String selectedPatient = (String) jComboBox14.getSelectedItem();
            if (selectedPatient != null && !selectedPatient.isEmpty()) {
                loadAppointmentDetails(selectedPatient);
                // Update patient ID combo box based on selected patient name
                for (JSONObject patient : patientList) {
                    if (patient.get("name").toString().equals(selectedPatient)) {
                        jComboBox12.setSelectedItem(patient.get("id").toString());
                        break;
                    }
                }
            }
        });

        jComboBox12.addActionListener(e -> {
            String selectedPatientId = (String) jComboBox12.getSelectedItem();
            if (selectedPatientId != null && !selectedPatientId.isEmpty()) {
                for (JSONObject patient : patientList) {
                    if (patient.get("id").toString().equals(selectedPatientId)) {
                        jComboBox14.setSelectedItem(patient.get("name").toString());
                        loadAppointmentDetails(patient.get("name").toString());
                        break;
                    }
                }
            }
        });
    }

    private void loadAppointmentDetails(String patientName) {
        try (FileReader reader = new FileReader(appointmentFilePath)) {
            JSONParser parser = new JSONParser();
            JSONObject jsonObject = (JSONObject) parser.parse(reader);
            JSONArray appointments = (JSONArray) jsonObject.get("appointments");

            if (appointments != null) {
                for (Object obj : appointments) {
                    JSONObject appointment = (JSONObject) obj;
                    if (appointment.get("patientName").toString().equalsIgnoreCase(patientName)) {
                        jComboBox14.setSelectedItem(appointment.get("patientName"));
                        jComboBox12.setSelectedItem(appointment.get("patientId"));
                        jComboBox13.setSelectedItem(appointment.get("department"));
                        jComboBox15.setSelectedItem(appointment.get("doctorName"));
                        jTextField5.setText(appointment.get("appointmentDate").toString());
                        jComboBox11.setSelectedItem(appointment.get("timeSlot"));
                        jTextField7.setText(appointment.get("problem").toString());
                        jTextField10.setText(appointment.get("medicalHistory").toString());
                        return;
                    }
                }
            }

            JOptionPane.showMessageDialog(this, "Appointment not found for patient: " + patientName);
            clearEditAppointmentFields();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading appointment details.");
        }
    }

    private void updateAppointment() {
        if (!jCheckBox2.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please confirm the appointment details.");
            return;
        }

        String patientName = (String) jComboBox14.getSelectedItem();
        String patientId = (String) jComboBox12.getSelectedItem();
        String department = (String) jComboBox13.getSelectedItem();
        String doctorName = (String) jComboBox15.getSelectedItem();
        String appointmentDate = jTextField5.getText().trim();
        String timeSlot = (String) jComboBox11.getSelectedItem();
        String problem = jTextField7.getText().trim();
        String medicalHistory = jTextField10.getText().trim();

        if (patientName == null || patientId == null || department == null || doctorName == null ||
            appointmentDate.isEmpty() || timeSlot == null || problem.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields.");
            return;
        }

        // Validate patient ID and name consistency
        boolean validPatient = false;
        for (JSONObject patient : patientList) {
            if (patient.get("name").toString().equals(patientName) && patient.get("id").toString().equals(patientId)) {
                validPatient = true;
                break;
            }
        }
        if (!validPatient) {
            JOptionPane.showMessageDialog(this, "Selected patient name and ID do not match.");
            return;
        }

        if (!timeSlot.matches("\\d{2}:\\d{2}-\\d{2}:\\d{2}")) {
            JOptionPane.showMessageDialog(this, "Invalid time slot format. Please select a valid time slot (e.g., 09:00-10:00).");
            return;
        }

        if (!appointmentDate.matches("\\d{4}-\\d{2}-\\d{2}")) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use YYYY-MM-DD.");
            return;
        }

        try (FileReader reader = new FileReader(appointmentFilePath)) {
            JSONParser parser = new JSONParser();
            JSONObject jsonObject = (JSONObject) parser.parse(reader);
            JSONArray appointments = (JSONArray) jsonObject.get("appointments");

            boolean found = false;

            if (appointments != null) {
                for (int i = 0; i < appointments.size(); i++) {
                    JSONObject appointment = (JSONObject) appointments.get(i);
                    if (appointment.get("patientName").toString().equalsIgnoreCase(patientName)) {
                        appointment.put("patientName", patientName);
                        appointment.put("patientId", patientId);
                        appointment.put("department", department);
                        appointment.put("doctorName", doctorName);
                        appointment.put("appointmentDate", appointmentDate);
                        appointment.put("timeSlot", timeSlot);
                        appointment.put("problem", problem);
                        appointment.put("medicalHistory", medicalHistory);
                        appointment.put("appointmentTime", formatAppointmentTime(appointmentDate, timeSlot));
                        found = true;
                        break;
                    }
                }
            }

            if (!found) {
                JOptionPane.showMessageDialog(this, "Appointment not found!");
                return;
            }

            try (FileWriter writer = new FileWriter(appointmentFilePath)) {
                jsonObject.put("appointments", appointments);
                writer.write(jsonObject.toJSONString());
                writer.flush();
            }

            JOptionPane.showMessageDialog(this, "Appointment updated successfully!");
            loadAppointments();
            clearEditAppointmentFields();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating appointment record.");
        }
    }

    private void clearEditAppointmentFields() {
        jTextField5.setText("");
        jTextField7.setText("");
        jTextField10.setText("");
        jComboBox11.setSelectedIndex(0);
        jComboBox12.setSelectedIndex(0);
        jComboBox13.setSelectedIndex(0);
        jComboBox14.setSelectedIndex(0);
        jComboBox15.setSelectedIndex(0);
        jCheckBox2.setSelected(false);
    }

    private String generateTokenNumber() {
        return "T" + (int) (Math.random() * 10000);
    }

    private String formatAppointmentTime(String date, String timeSlot) {
        try {
            if (date == null || timeSlot == null || date.isEmpty() || timeSlot.isEmpty()) {
                return "";
            }

            String[] dateParts = date.split("-");
            if (dateParts.length != 3) {
                return "";
            }

            String[] timeSlotParts = timeSlot.split("-");
            if (timeSlotParts.length != 2) {
                return "";
            }

            String[] timeParts = timeSlotParts[0].split(":");
            if (timeParts.length != 2) {
                return "";
            }

            return dateParts[0] + dateParts[1] + dateParts[2] + timeParts[0] + timeParts[1];
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    private void PatientManagementButton(ActionEvent evt) {
        Patient_Management a = new Patient_Management();
        a.setVisible(true);
        setVisible(false);
    }

    private void PatientRecordsButton(ActionEvent evt) {
        Patient_Records a = new Patient_Records();
        a.setVisible(true);
        setVisible(false);
    }

    private void BillingButton(ActionEvent evt) {
        Billing_Services a = new Billing_Services();
        a.setVisible(true);
        setVisible(false);
    }

    private void DashboardButton(ActionEvent evt) {
        Dashboard a = new Dashboard();
        a.setVisible(true);
        setVisible(false);
    }

    private void setTabSize(JTabbedPane tabbedPane, int index, Dimension size) {
        Font poppinsFont = new Font("Poppins", Font.PLAIN, 16);
        JLabel label = new JLabel(tabbedPane.getTitleAt(index));
        label.setPreferredSize(size);
        label.setMinimumSize(size);
        label.setMaximumSize(size);
        label.setFont(poppinsFont);
        label.setHorizontalAlignment(SwingConstants.CENTER);
        tabbedPane.setTabComponentAt(index, label);
    }

    public void setButtonBG(javax.swing.JButton... buttons) {
        for (javax.swing.JButton button : buttons) {
            button.setOpaque(false);
            button.setContentAreaFilled(false);
            button.setBorderPainted(false);
            button.setForeground(Color.WHITE);
        }
    }

    private void applyGradient(javax.swing.JPanel panel, Color startColor, Color endColor, boolean isHorizontal) {
        panel.setOpaque(false);
        panel.setUI(new javax.swing.plaf.PanelUI() {
            @Override
            public void update(Graphics g, JComponent c) {
                Graphics2D g2d = (Graphics2D) g;
                int width = c.getWidth();
                int height = c.getHeight();
                GradientPaint gp = isHorizontal
                    ? new GradientPaint(0, 0, startColor, width, 0, endColor)
                    : new GradientPaint(0, 0, startColor, 0, height, endColor);
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, width, height);
                super.update(g, c);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AppointmentButton;
    private javax.swing.JButton BillingButton;
    private javax.swing.JButton DashboardButton;
    private javax.swing.JButton PatientManagementButton;
    private javax.swing.JButton PatientRecordsButton;
    private javax.swing.JButton TaskButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton8;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JComboBox<String> jComboBox11;
    private javax.swing.JComboBox<String> jComboBox12;
    private javax.swing.JComboBox<String> jComboBox13;
    private javax.swing.JComboBox<String> jComboBox14;
    private javax.swing.JComboBox<String> jComboBox15;
    private javax.swing.JComboBox<String> jComboBox16;
    private javax.swing.JComboBox<String> jComboBox17;
    private javax.swing.JComboBox<String> jComboBox18;
    private javax.swing.JComboBox<String> jComboBox19;
    private javax.swing.JComboBox<String> jComboBox20;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField7;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    private javax.swing.JPanel sideBarPanel;
    // End of variables declaration//GEN-END:variables
}
