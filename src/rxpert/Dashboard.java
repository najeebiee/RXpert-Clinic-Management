/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rxpert;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.InputStream;
import java.io.InputStreamReader;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.TableColumnModel;
import org.json.simple.JSONArray;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;


/**
 *
 * @author najx
 */
public class Dashboard extends javax.swing.JFrame {

    /**
     * Creates new form Appointment_Scheduling
     */
    public Dashboard() {
        initComponents();
        customInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        sideBarPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        DashboardButton = new javax.swing.JButton();
        PatientManagementButton = new javax.swing.JButton();
        AppointmentButton = new javax.swing.JButton();
        PatientRecordsButton = new javax.swing.JButton();
        BillingButton = new javax.swing.JButton();
        TaskButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        taskTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1440, 1024));
        setPreferredSize(new java.awt.Dimension(1440, 1024));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.X_AXIS));

        sideBarPanel.setBackground(new java.awt.Color(0, 204, 204));
        sideBarPanel.setForeground(new java.awt.Color(255, 255, 255));
        sideBarPanel.setMaximumSize(new java.awt.Dimension(250, 1050));
        sideBarPanel.setMinimumSize(new java.awt.Dimension(250, 1024));
        sideBarPanel.setPreferredSize(new java.awt.Dimension(250, 1024));
        sideBarPanel.setLayout(new javax.swing.BoxLayout(sideBarPanel, javax.swing.BoxLayout.Y_AXIS));

        jLabel1.setFont(new java.awt.Font("Helvetica Rounded", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("   RXpert");
        jLabel1.setMaximumSize(new java.awt.Dimension(250, 150));
        jLabel1.setMinimumSize(new java.awt.Dimension(250, 150));
        jLabel1.setPreferredSize(new java.awt.Dimension(250, 150));
        sideBarPanel.add(jLabel1);

        DashboardButton.setBackground(new java.awt.Color(0, 204, 204));
        DashboardButton.setFont(new java.awt.Font("Poppins", 0, 16)); // NOI18N
        DashboardButton.setForeground(new java.awt.Color(255, 255, 255));
        DashboardButton.setText("Dashboard");
        DashboardButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        DashboardButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DashboardButton.setMaximumSize(new java.awt.Dimension(250, 50));
        sideBarPanel.add(DashboardButton);

        PatientManagementButton.setBackground(new java.awt.Color(0, 204, 204));
        PatientManagementButton.setFont(new java.awt.Font("Poppins", 0, 16)); // NOI18N
        PatientManagementButton.setForeground(new java.awt.Color(255, 255, 255));
        PatientManagementButton.setText("Patient Management");
        PatientManagementButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        PatientManagementButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PatientManagementButton.setMaximumSize(new java.awt.Dimension(250, 50));
        sideBarPanel.add(PatientManagementButton);

        AppointmentButton.setBackground(new java.awt.Color(0, 204, 204));
        AppointmentButton.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        AppointmentButton.setForeground(new java.awt.Color(255, 255, 255));
        AppointmentButton.setText("Appointment Scheduling");
        AppointmentButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        AppointmentButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        AppointmentButton.setMaximumSize(new java.awt.Dimension(250, 50));
        sideBarPanel.add(AppointmentButton);

        PatientRecordsButton.setBackground(new java.awt.Color(0, 204, 204));
        PatientRecordsButton.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        PatientRecordsButton.setForeground(new java.awt.Color(255, 255, 255));
        PatientRecordsButton.setText("Patient Records");
        PatientRecordsButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        PatientRecordsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PatientRecordsButton.setMaximumSize(new java.awt.Dimension(250, 50));
        sideBarPanel.add(PatientRecordsButton);

        BillingButton.setBackground(new java.awt.Color(0, 204, 204));
        BillingButton.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        BillingButton.setForeground(new java.awt.Color(255, 255, 255));
        BillingButton.setText("Billing Services");
        BillingButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        BillingButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BillingButton.setMaximumSize(new java.awt.Dimension(250, 50));
        sideBarPanel.add(BillingButton);

        TaskButton.setBackground(new java.awt.Color(0, 204, 204));
        TaskButton.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        TaskButton.setForeground(new java.awt.Color(255, 255, 255));
        TaskButton.setText("Task Management");
        TaskButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        TaskButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        TaskButton.setMaximumSize(new java.awt.Dimension(250, 50));
        TaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TaskButtonActionPerformed(evt);
            }
        });
        sideBarPanel.add(TaskButton);

        getContentPane().add(sideBarPanel);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setMinimumSize(new java.awt.Dimension(1190, 840));
        jPanel2.setPreferredSize(new java.awt.Dimension(1190, 840));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jPanel4.setBackground(new java.awt.Color(252, 255, 246));
        jPanel4.setMinimumSize(new java.awt.Dimension(1300, 840));
        jPanel4.setPreferredSize(new java.awt.Dimension(1300, 840));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(1250, 900));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(1250, 840));
        jScrollPane1.setName(""); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(1250, 840));

        jPanel1.setBackground(new java.awt.Color(252, 255, 246));
        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(50, 50, 50, 50));
        jPanel1.setMinimumSize(new java.awt.Dimension(1190, 1250));
        jPanel1.setPreferredSize(new java.awt.Dimension(1190, 1250));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(120, 120, 120), new java.awt.Color(120, 120, 120)));

        jLabel7.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(38, 198, 218));
        jLabel7.setText("20");

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(38, 198, 218));
        jLabel6.setText("Appointments");

        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("ICON");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(27, 27, 27))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(120, 120, 120), new java.awt.Color(120, 120, 120)));

        jLabel10.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(38, 198, 218));
        jLabel10.setText("350");

        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("ICON");

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(38, 198, 218));
        jLabel9.setText("Active Tasks");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10))
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(120, 120, 120), new java.awt.Color(120, 120, 120)));

        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("ICON");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(38, 198, 218));
        jLabel3.setText("Patients Registered");

        jLabel4.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(38, 198, 218));
        jLabel4.setText("350");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        taskTable.setBackground(new java.awt.Color(255, 255, 255));
        taskTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        taskTable.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        taskTable.setForeground(new java.awt.Color(102, 102, 102));
        taskTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Task Title", "Priority", "Due Date", "Reminder Time"
            }
        ));
        jScrollPane4.setViewportView(taskTable);

        jTable1.setBackground(new java.awt.Color(255, 255, 255));
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jTable1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jTable1.setForeground(new java.awt.Color(102, 102, 102));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Department", "Doctor Name", "Appointment Date", "Time Slot", "Token Number"
            }
        ));
        jScrollPane5.setViewportView(jTable1);

        jTable2.setBackground(new java.awt.Color(255, 255, 255));
        jTable2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jTable2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jTable2.setForeground(new java.awt.Color(102, 102, 102));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient Name", "Appointment Date", "Time Slot", "Reason for Visit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5)
                    .addComponent(jScrollPane8))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 19, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TaskButtonActionPerformed
        Task_Management a = new Task_Management();
        a.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_TaskButtonActionPerformed
private void DashboardButton(ActionEvent evt) {
        JOptionPane.showMessageDialog(this, "Already on Dashboard!");
    }

    private void PatientManagementButton(ActionEvent evt) {
        Patient_Management a = new Patient_Management();
        a.setVisible(true);
        setVisible(false);
    }

    private void AppointmentButton(ActionEvent evt) {
        Appointment_Scheduling a = new Appointment_Scheduling();
        a.setVisible(true);
        setVisible(false);
    }

    private void PatientRecordsButton(ActionEvent evt) {
        Patient_Records a = new Patient_Records();
        a.setVisible(true);
        setVisible(false);
    }

    private void BillingButton(ActionEvent evt) {
        Billing_Services a = new Billing_Services();
        a.setVisible(true);
        setVisible(false);
    }
    private void applyGradient(JPanel panel, Color startColor, Color endColor, boolean isHorizontal) {
        panel.setOpaque(false);
        panel.setUI(new javax.swing.plaf.PanelUI() {
            @Override
            public void update(Graphics g, JComponent c) {
                Graphics2D g2d = (Graphics2D) g;
                int width = c.getWidth();
                int height = c.getHeight();

                GradientPaint gp = isHorizontal
                    ? new GradientPaint(0, 0, startColor, width, 0, endColor)
                    : new GradientPaint(0, 0, startColor, 0, height, endColor);

                g2d.setPaint(gp);
                g2d.fillRect(0, 0, width, height);

                super.update(g, c);
            }
        });
    }

    private void setButtonBG(JButton... buttons) {
        for (JButton button : buttons) {
            button.setOpaque(false);
            button.setContentAreaFilled(false);
            button.setBorderPainted(false);
            button.setForeground(Color.WHITE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }
    
   private void customInit() {
    // Remove the white background for jLabel1 to allow the gradient to show through
        jLabel1.setOpaque(false);

        // Set icons for jLabel2 (Patients), jLabel5 (Appointments), and jLabel8 (Tasks)
        try {
            // Icon for Patients (jLabel2)
            ImageIcon patientIcon = new ImageIcon(getClass().getResource("/icons/nurse.png"));
            if (patientIcon.getIconWidth() == -1) {
                throw new Exception("Failed to load patient icon");
            }
            Image patientImage = patientIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            jLabel2.setIcon(new ImageIcon(patientImage));
            jLabel2.setText(""); // Remove "ICON" placeholder text

            // Icon for Appointments (jLabel5)
            ImageIcon appointmentIcon = new ImageIcon(getClass().getResource("/icons/calendars_icon.png"));
            if (appointmentIcon.getIconWidth() == -1) {
                throw new Exception("Failed to load appointment icon");
            }
            Image appointmentImage = appointmentIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            jLabel5.setIcon(new ImageIcon(appointmentImage));
            jLabel5.setText(""); // Remove "ICON" placeholder text

            // Icon for Tasks (jLabel8)
            ImageIcon taskIcon = new ImageIcon(getClass().getResource("/icons/chat_icon.png"));
            if (taskIcon.getIconWidth() == -1) {
                throw new Exception("Failed to load task icon");
            }
            Image taskImage = taskIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            jLabel8.setIcon(new ImageIcon(taskImage));
            jLabel8.setText(""); // Remove "ICON" placeholder text
        } catch (Exception e) {
            System.err.println("Error loading icons: " + e.getMessage());
            jLabel2.setText("Icon Error");
            jLabel5.setText("Icon Error");
            jLabel8.setText("Icon Error");
        }

        // Load and parse JSON files to update counts
        JSONParser parser = new JSONParser();
        JSONArray patientsArray = null;
        JSONArray appointmentsArray = null;
        JSONArray tasksArray = null;

        try {
            // Patients count from patient.json
            InputStream patientStream = getClass().getResourceAsStream("/maeclinicapp/patient.json");
            if (patientStream == null) {
                throw new java.io.IOException("patient.json not found in /maeclinicapp/");
            }
            JSONObject patientJson = (JSONObject) parser.parse(new InputStreamReader(patientStream));
            patientsArray = (JSONArray) patientJson.get("patientList"); // Correct key: "patientList"
            if (patientsArray == null) {
                throw new IllegalArgumentException("No 'patientList' array found in patient.json");
            }
            jLabel4.setText(String.valueOf(patientsArray.size())); // Update Patients Registered count
            patientStream.close();

            // Appointments count from appointments.json
            InputStream appointmentsStream = getClass().getResourceAsStream("/maeclinicapp/appointments.json");
            if (appointmentsStream == null) {
                throw new java.io.IOException("appointments.json not found in /maeclinicapp/");
            }
            JSONObject appointmentsJson = (JSONObject) parser.parse(new InputStreamReader(appointmentsStream));
            appointmentsArray = (JSONArray) appointmentsJson.get("appointments"); // Key: "appointments"
            if (appointmentsArray == null) {
                throw new IllegalArgumentException("No 'appointments' array found in appointments.json");
            }
            jLabel7.setText(String.valueOf(appointmentsArray.size())); // Update Appointments count
            appointmentsStream.close();

            // Active Tasks count from tasks.json
            InputStream tasksStream = getClass().getResourceAsStream("/maeclinicapp/tasks.json");
            if (tasksStream == null) {
                throw new java.io.IOException("tasks.json not found in /maeclinicapp/");
            }
            JSONObject tasksJson = (JSONObject) parser.parse(new InputStreamReader(tasksStream));
            tasksArray = (JSONArray) tasksJson.get("taskList"); // Correct key: "taskList"
            if (tasksArray == null) {
                throw new IllegalArgumentException("No 'taskList' array found in tasks.json");
            }
            // If tasks have a "status" field and we only want "active" tasks, filter them
            int activeTaskCount = 0;
            for (Object obj : tasksArray) {
                JSONObject task = (JSONObject) obj;
                if (task.containsKey("status") && "active".equalsIgnoreCase((String) task.get("status"))) {
                    activeTaskCount++;
                }
            }
            // Since there's no "status" field in tasks.json, count all tasks
            jLabel10.setText(String.valueOf(activeTaskCount > 0 ? activeTaskCount : tasksArray.size())); // Update Active Tasks count
            tasksStream.close();
        } catch (java.io.IOException | ParseException | IllegalArgumentException e) {
            System.err.println("Error loading JSON files: " + e.getMessage());
            jLabel4.setText("Error");
            jLabel7.setText("Error");
            jLabel10.setText("Error");
            JOptionPane.showMessageDialog(this, "Failed to load data from JSON files: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method to avoid further processing
        }

        // Set column widths for taskTable (Task Title, Priority, Due Date, Reminder Time)
        TableColumnModel columnModel = taskTable.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(300); // Task Title
        columnModel.getColumn(1).setPreferredWidth(100); // Priority
        columnModel.getColumn(2).setPreferredWidth(150); // Due Date
        columnModel.getColumn(3).setPreferredWidth(150); // Reminder Time
        taskTable.setRowHeight(40);

        // Populate taskTable with data from tasks.json
        if (tasksArray != null) {
            Object[][] taskData = new Object[tasksArray.size()][4];
            for (int i = 0; i < tasksArray.size(); i++) {
                JSONObject task = (JSONObject) tasksArray.get(i);
                taskData[i][0] = task.get("title"); // Task Title
                taskData[i][1] = task.get("priority"); // Priority
                taskData[i][2] = task.get("dueDate"); // Due Date
                taskData[i][3] = task.get("reminderTime"); // Reminder Time
            }
            taskTable.setModel(new javax.swing.table.DefaultTableModel(
                taskData,
                new String[] {"Task Title", "Priority", "Due Date", "Reminder Time"}
            ));
        }

        // Set column widths for jTable1 (Patient Name, Department, Doctor Name, Appointment Date, Time Slot, Token Number)
        TableColumnModel columnModel2 = jTable1.getColumnModel();
        columnModel2.getColumn(0).setPreferredWidth(150); // Patient Name
        columnModel2.getColumn(1).setPreferredWidth(100); // Department
        columnModel2.getColumn(2).setPreferredWidth(150); // Doctor Name
        columnModel2.getColumn(3).setPreferredWidth(150); // Appointment Date
        columnModel2.getColumn(4).setPreferredWidth(100); // Time Slot
        columnModel2.getColumn(5).setPreferredWidth(100); // Token Number
        jTable1.setRowHeight(40);

        // Populate jTable1 with data from appointments.json
        if (appointmentsArray != null) {
            Object[][] appointmentData = new Object[appointmentsArray.size()][6];
            for (int i = 0; i < appointmentsArray.size(); i++) {
                JSONObject appointment = (JSONObject) appointmentsArray.get(i);
                appointmentData[i][0] = appointment.get("patientName"); // Patient Name
                appointmentData[i][1] = appointment.get("department"); // Department
                appointmentData[i][2] = appointment.get("doctorName"); // Doctor Name
                appointmentData[i][3] = appointment.get("appointmentDate"); // Appointment Date
                appointmentData[i][4] = appointment.get("timeSlot"); // Time Slot
                appointmentData[i][5] = appointment.get("tokenNumber"); // Token Number
            }
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                appointmentData,
                new String[] {"Patient Name", "Department", "Doctor Name", "Appointment Date", "Time Slot", "Token Number"}
            ));
        }

        // Set column widths for jTable2 (Patient Name, Appointment Date, Time Slot, Reason for Visit)
        TableColumnModel columnModel3 = jTable2.getColumnModel();
        columnModel3.getColumn(0).setPreferredWidth(150); // Patient Name
        columnModel3.getColumn(1).setPreferredWidth(150); // Appointment Date
        columnModel3.getColumn(2).setPreferredWidth(100); // Time Slot
        columnModel3.getColumn(3).setPreferredWidth(200); // Reason for Visit
        jTable2.setRowHeight(40);

        // Populate jTable2 with data from appointments.json
        if (appointmentsArray != null) {
            Object[][] recentAppointmentData = new Object[appointmentsArray.size()][4];
            for (int i = 0; i < appointmentsArray.size(); i++) {
                JSONObject appointment = (JSONObject) appointmentsArray.get(i);
                recentAppointmentData[i][0] = appointment.get("patientName"); // Patient Name
                recentAppointmentData[i][1] = appointment.get("appointmentDate"); // Appointment Date
                recentAppointmentData[i][2] = appointment.get("timeSlot"); // Time Slot
                recentAppointmentData[i][3] = appointment.get("problem"); // Reason for Visit
            }
            jTable2.setModel(new javax.swing.table.DefaultTableModel(
                recentAppointmentData,
                new String[] {"Patient Name", "Appointment Date", "Time Slot", "Reason for Visit"}
            ) {
                boolean[] canEdit = new boolean[] {true, true, true, false};
                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        }
        
        setExtendedState(JFrame.MAXIMIZED_BOTH);  // Make the frame full screen

        // Button listeners
        DashboardButton.addActionListener(e -> DashboardButton(e));
        PatientManagementButton.addActionListener(e -> PatientManagementButton(e));
        AppointmentButton.addActionListener(e -> AppointmentButton(e));
        PatientRecordsButton.addActionListener(e -> PatientRecordsButton(e));
        BillingButton.addActionListener(e -> BillingButton(e));

        // Apply gradients without replacing panels
        applyGradient(sideBarPanel, new Color(0x26C6DA), new Color(0x92FFCD), false); // Vertical

        setButtonBG(
            DashboardButton,
            AppointmentButton,
            PatientRecordsButton,
            PatientManagementButton,
            TaskButton,
            BillingButton
        );

        revalidate();
        repaint();
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AppointmentButton;
    private javax.swing.JButton BillingButton;
    private javax.swing.JButton DashboardButton;
    private javax.swing.JButton PatientManagementButton;
    private javax.swing.JButton PatientRecordsButton;
    private javax.swing.JButton TaskButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    private javax.swing.JPanel sideBarPanel;
    private javax.swing.JTable taskTable;
    // End of variables declaration//GEN-END:variables
}
