/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Nurse;
import maeclinicapp.JsonUtil;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.io.File;
import com.itextpdf.text.Document;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileOutputStream;

/**
 *
 * @author USER
 */
public class Form2 extends TransitionsForm {
    private String nurseId;
    /**
     * Creates new form Form
     */
    public Form2(String nurseId) {
        
        this.nurseId = nurseId;
        initComponents();
        loadReceipts();


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        receiptsGridPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Receipts");
        add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 150));

        receiptsGridPanel.setBackground(new java.awt.Color(204, 204, 204));
        receiptsGridPanel.setLayout(new java.awt.GridLayout(0, 2, 10, 10));
        jScrollPane1.setViewportView(receiptsGridPanel);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
 private void loadReceipts() {
        try {
            System.out.println("Form2: Loading receipts for nurseId " + nurseId);
            JSONObject billsJson = JsonUtil.readJsonFile("C:\\Users\\najx\\Downloads\\RxPert\\RxPert\\src\\maeclinicapp\\bills.json");
            JSONArray bills = (JSONArray) billsJson.get("bills");
            System.out.println("Form2: billsJson = " + billsJson);

            receiptsGridPanel.removeAll();
            int matchingBillCount = 0;

            if (bills == null || bills.isEmpty()) {
                JLabel noReceiptsLabel = new JLabel("No bills available.");
                noReceiptsLabel.setHorizontalAlignment(SwingConstants.CENTER);
                noReceiptsLabel.setForeground(new Color(0, 206, 209));
                receiptsGridPanel.add(noReceiptsLabel);
                System.out.println("Form2: No bills found.");
            } else {
                for (Object obj : bills) {
                    JSONObject bill = (JSONObject) obj;
                    String billNurseId = (String) bill.get("nurseId");
                    if (billNurseId != null && billNurseId.equals(nurseId)) {
                        matchingBillCount++;
                    }
                }

                for (Object obj : bills) {
                    JSONObject bill = (JSONObject) obj;
                    String billNurseId = (String) bill.get("nurseId");
                    if (billNurseId != null && billNurseId.equals(nurseId)) {
                        String billId = (String) bill.get("billId");
                        String patientName = (String) bill.get("patientName");
                        String date = (String) bill.get("date");

                        DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyyMMddHHmm");
                        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("MMMM d, yyyy");
                        LocalDateTime dateTime = LocalDateTime.parse(date, inputFormatter);
                        String formattedDate = dateTime.format(dateFormatter);

                        int height = (matchingBillCount == 1) ? 80 : 120;
                        ReceiptCard receiptCard = new ReceiptCard(
                            "RECEIPT",
                            formattedDate,
                            patientName,
                            billId,
                            new MouseAdapter() {
                                @Override
                                public void mouseClicked(MouseEvent e) {
                                    showFullReceipt(bill);
                                }
                            },
                            height
                        );
                        receiptsGridPanel.add(receiptCard);
                    }
                }

                if (matchingBillCount == 0) {
                    JLabel noReceiptsLabel = new JLabel("No bills assigned to you.");
                    noReceiptsLabel.setHorizontalAlignment(SwingConstants.CENTER);
                    noReceiptsLabel.setForeground(new Color(0, 206, 209));
                    receiptsGridPanel.add(noReceiptsLabel);
                }
                System.out.println("Form2: Found " + matchingBillCount + " bills for nurseId " + nurseId);
            }

            receiptsGridPanel.revalidate();
            receiptsGridPanel.repaint();
            System.out.println("Form2: Components in receiptsGridPanel = " + receiptsGridPanel.getComponentCount());
        } catch (Exception e) {
            JLabel errorLabel = new JLabel("Error loading receipts: " + e.getMessage());
            errorLabel.setHorizontalAlignment(SwingConstants.CENTER);
            errorLabel.setForeground(new Color(0, 206, 209));
            receiptsGridPanel.add(errorLabel);
            receiptsGridPanel.revalidate();
            receiptsGridPanel.repaint();
            e.printStackTrace();
        }
    }

    private void showFullReceipt(JSONObject bill) {
        JDialog receiptDialog = new JDialog();
        receiptDialog.setTitle("Receipt #" + bill.get("billId"));
        receiptDialog.setSize(400, 600);
        receiptDialog.setLayout(new BorderLayout());
        receiptDialog.setLocationRelativeTo(this);

        JPanel receiptPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                GradientPaint gp = new GradientPaint(0, 0, new Color(0, 206, 209), 0, getHeight(), new Color(32, 178, 170));
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        receiptPanel.setOpaque(false);
        receiptPanel.setLayout(new BorderLayout());
        receiptPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        String receiptText = buildReceiptText(bill);
        JTextArea receiptArea = new JTextArea(receiptText);
        receiptArea.setEditable(false);
        receiptArea.setFont(new java.awt.Font("Monospaced", 0, 14));
        receiptArea.setForeground(Color.WHITE);
        receiptArea.setOpaque(false);
        receiptArea.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        JScrollPane scrollPane = new JScrollPane(receiptArea);
        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        receiptPanel.add(scrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setOpaque(false);
        JButton printButton = new JButton("Print Receipt");
        printButton.setBackground(new Color(255, 255, 255));
        printButton.setForeground(new Color(0, 206, 209));
        printButton.setBorder(BorderFactory.createLineBorder(new Color(0, 206, 209), 2));
        printButton.addActionListener(e -> printReceipt(receiptText, (String) bill.get("billId")));
        buttonPanel.add(printButton);

        receiptPanel.add(buttonPanel, BorderLayout.SOUTH);
        receiptDialog.add(receiptPanel, BorderLayout.CENTER);
        receiptDialog.setVisible(true);
    }

    private String buildReceiptText(JSONObject bill) {
        String billId = (String) bill.get("billId");
        String patientName = (String) bill.get("patientName");
        String nurseName = (String) bill.get("nurseName");
        String services = (String) bill.get("services");
        double amount = ((Number) bill.get("amount")).doubleValue();
        String status = (String) bill.get("status");
        String date = (String) bill.get("date");

        DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyyMMddHHmm");
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        LocalDateTime dateTime = LocalDateTime.parse(date, inputFormatter);
        String formattedDate = dateTime.format(dateFormatter);
        String formattedTime = dateTime.format(timeFormatter);

        StringBuilder receiptText = new StringBuilder();
        receiptText.append("========================================\n");
        receiptText.append("           MAE Clinic Receipt           \n");
        receiptText.append("========================================\n\n");
        receiptText.append(String.format("Receipt ID: #ID-%s%n", billId));
        receiptText.append(String.format("Date: %s  Time: %s%n%n", formattedDate, formattedTime));
        receiptText.append(String.format("Patient: %s%n", patientName));
        receiptText.append(String.format("Nurse: %s%n%n", nurseName));
        receiptText.append("----------------------------------------\n");
        receiptText.append("Services Provided:\n");
        receiptText.append(String.format("%s%n", services));
        receiptText.append("----------------------------------------\n\n");
        receiptText.append(String.format("Amount: $%.2f%n", amount));
        receiptText.append(String.format("Status: %s%n%n", status));
        receiptText.append("========================================\n");
        receiptText.append("Thank you for choosing MAE Clinic!\n");

        return receiptText.toString();
    }

    private void printReceipt(String receiptText, String billId) {
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Save Receipt As");
            fileChooser.setSelectedFile(new File("Receipt_" + billId + ".pdf"));
            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();
                String filePath = fileToSave.getAbsolutePath();
                if (!filePath.toLowerCase().endsWith(".pdf")) {
                    filePath += ".pdf";
                }

                Document document = new Document();
                PdfWriter.getInstance(document, new FileOutputStream(filePath));
                document.open();
                document.add(new Paragraph(receiptText));
                document.close();

                JOptionPane.showMessageDialog(this, "Receipt saved as PDF at: " + filePath);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error saving receipt: " + ex.getMessage());
        }
    }

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel receiptsGridPanel;
    // End of variables declaration//GEN-END:variables
}
