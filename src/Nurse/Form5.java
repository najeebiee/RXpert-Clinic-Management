/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Nurse;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMultipart;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author USER
 */
public class Form5 extends TransitionsForm {
 private Session newSession;
    private JTextField textEmail;
    private JTextField textSubject;
    private JTextField messageText;
    private JButton sendButton;
    private JButton discardButton;
    private JButton draftButton;
    private JButton attachButton;
    private JPanel mainPanel;
    private JPanel formPanel;
    private JLabel loadingLabel;
    private JProgressBar loadingBar;
    private JLabel messageCounterLabel;
    private JPanel notificationPanel;
    private JLabel notificationLabel;
    private JPanel attachmentsPanel;
    private List<File> attachments;
    private boolean isUILoaded = false;
    private boolean isSending = false;
    private Timer notificationFadeTimer;

    /**
     * Creates new form Form
     */
    public Form5() {
        initComponents();
        setupServerProperties();
        attachments = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        TextEmail = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        MessageText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(51, 51, 255));

        jLabel1.setText("Patient's Email: ");

        jLabel2.setText("Message");

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TextEmail)
                            .addComponent(MessageText, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(309, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MessageText, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(88, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
@Override
    public void addNotify() {
        super.addNotify();
        if (!isUILoaded) {
            initDynamicComponents();
            isUILoaded = true;
        }
    }

    @Override
    public void removeNotify() {
        super.removeNotify();
        if (notificationFadeTimer != null) {
            notificationFadeTimer.stop();
        }
    }

    private void initDynamicComponents() {
        // Remove the default layout and components
        removeAll();
        setLayout(new BorderLayout());
        setBackground(new Color(245, 245, 245)); // Light gray background

        // Main panel
        mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBackground(new Color(245, 245, 245));
        add(mainPanel, BorderLayout.CENTER);

        // Header panel
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(Color.WHITE);
        headerPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(200, 200, 200)));
        JLabel titleLabel = new JLabel("New Message");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
        titleLabel.setForeground(new Color(50, 50, 50));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 0));
        headerPanel.add(titleLabel, BorderLayout.WEST);

        // Discard button (X)
        discardButton = new JButton("âœ–");
        discardButton.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        discardButton.setForeground(new Color(150, 150, 150));
        discardButton.setBackground(Color.WHITE);
        discardButton.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 20));
        discardButton.setFocusPainted(false);
        discardButton.addActionListener(e -> resetFormFields());
        discardButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                discardButton.setForeground(new Color(255, 99, 71));
            }
            @Override
            public void mouseExited(MouseEvent e) {
                discardButton.setForeground(new Color(150, 150, 150));
            }
        });
        headerPanel.add(discardButton, BorderLayout.EAST);
        mainPanel.add(headerPanel, BorderLayout.NORTH);

        // Form panel
        formPanel = new JPanel();
        formPanel.setBackground(Color.WHITE);
        formPanel.setLayout(new GridBagLayout());
        formPanel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 0, 5, 0);
        gbc.anchor = GridBagConstraints.WEST;

        // Email field
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        JPanel emailPanel = new JPanel(new BorderLayout());
        emailPanel.setBackground(Color.WHITE);
        JLabel emailLabel = new JLabel("To: ");
        emailLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        emailLabel.setForeground(new Color(100, 100, 100));
        emailPanel.add(emailLabel, BorderLayout.WEST);
        textEmail = TextEmail;
        textEmail.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(200, 200, 200)));
        textEmail.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        textEmail.setForeground(new Color(50, 50, 50));
        textEmail.setText("Enter patient's email...");
        textEmail.setForeground(new Color(150, 150, 150));
        textEmail.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (textEmail.getText().equals("Enter patient's email...")) {
                    textEmail.setText("");
                    textEmail.setForeground(new Color(50, 50, 50));
                }
                textEmail.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, new Color(0, 153, 153)));
            }
            @Override
            public void focusLost(FocusEvent e) {
                if (textEmail.getText().isEmpty()) {
                    textEmail.setText("Enter patient's email...");
                    textEmail.setForeground(new Color(150, 150, 150));
                }
                textEmail.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(200, 200, 200)));
            }
        });
        emailPanel.add(textEmail, BorderLayout.CENTER);
        formPanel.add(emailPanel, gbc);

        // Subject field
        gbc.gridx = 0;
        gbc.gridy = 1;
        JPanel subjectPanel = new JPanel(new BorderLayout());
        subjectPanel.setBackground(Color.WHITE);
        JLabel subjectLabel = new JLabel("Subject: ");
        subjectLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        subjectLabel.setForeground(new Color(100, 100, 100));
        subjectPanel.add(subjectLabel, BorderLayout.WEST);
        textSubject = new JTextField();
        textSubject.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(200, 200, 200)));
        textSubject.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        textSubject.setForeground(new Color(50, 50, 50));
        textSubject.setText("Enter email subject...");
        textSubject.setForeground(new Color(150, 150, 150));
        textSubject.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (textSubject.getText().equals("Enter email subject...")) {
                    textSubject.setText("");
                    textSubject.setForeground(new Color(50, 50, 50));
                }
                textSubject.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, new Color(0, 153, 153)));
            }
            @Override
            public void focusLost(FocusEvent e) {
                if (textSubject.getText().isEmpty()) {
                    textSubject.setText("Enter email subject...");
                    textSubject.setForeground(new Color(150, 150, 150));
                }
                textSubject.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(200, 200, 200)));
            }
        });
        subjectPanel.add(textSubject, BorderLayout.CENTER);
        formPanel.add(subjectPanel, gbc);

        // Message field
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        messageText = MessageText;
        messageText.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));
        messageText.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        messageText.setForeground(new Color(50, 50, 50));
        messageText.setText("Enter your message...");
        messageText.setForeground(new Color(150, 150, 150));
        messageText.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (messageText.getText().equals("Enter your message...")) {
                    messageText.setText("");
                    textEmail.setForeground(new Color(50, 50, 50));
                }
            }
            @Override
            public void focusLost(FocusEvent e) {
                if (messageText.getText().isEmpty()) {
                    messageText.setText("Enter your message...");
                    messageText.setForeground(new Color(150, 150, 150));
                }
            }
        });
        messageText.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                updateMessageCounter();
            }
        });
        formPanel.add(messageText, gbc);

        // Message counter
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weighty = 0.0;
        gbc.fill = GridBagConstraints.NONE;
        gbc.anchor = GridBagConstraints.EAST;
        messageCounterLabel = new JLabel("0/500");
        messageCounterLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        messageCounterLabel.setForeground(new Color(150, 150, 150));
        formPanel.add(messageCounterLabel, gbc);

        // Toolbar panel (icons like in the image)
        JPanel toolbarPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 5));
        toolbarPanel.setBackground(Color.WHITE);
        toolbarPanel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, new Color(200, 200, 200)));

        // Draft button (ðŸ’¾ icon)
        draftButton = new JButton("ðŸ’¾");
        draftButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        draftButton.setForeground(new Color(255, 165, 0));
        draftButton.setBackground(Color.WHITE);
        draftButton.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        draftButton.setFocusPainted(false);
        draftButton.addActionListener(e -> saveDraft());
        draftButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                draftButton.setForeground(new Color(255, 190, 0));
                draftButton.setFont(new Font("Segoe UI", Font.PLAIN, 18));
            }
            @Override
            public void mouseExited(MouseEvent e) {
                draftButton.setForeground(new Color(255, 165, 0));
                draftButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
            }
        });
        toolbarPanel.add(draftButton);

        // Attach button (ðŸ“Ž icon)
        attachButton = new JButton("ðŸ“Ž");
        attachButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        attachButton.setForeground(new Color(150, 150, 150));
        attachButton.setBackground(Color.WHITE);
        attachButton.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        attachButton.setFocusPainted(false);
        attachButton.addActionListener(e -> attachFile());
        attachButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                attachButton.setForeground(new Color(0, 153, 153));
                attachButton.setFont(new Font("Segoe UI", Font.PLAIN, 18));
            }
            @Override
            public void mouseExited(MouseEvent e) {
                attachButton.setForeground(new Color(150, 150, 150));
                attachButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
            }
        });
        toolbarPanel.add(attachButton);

        // More options button (â‹¯ icon)
        JButton moreButton = new JButton("â‹¯");
        moreButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        moreButton.setForeground(new Color(150, 150, 150));
        moreButton.setBackground(Color.WHITE);
        moreButton.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        moreButton.setFocusPainted(false);
        moreButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                moreButton.setForeground(new Color(0, 153, 153));
                moreButton.setFont(new Font("Segoe UI", Font.PLAIN, 18));
            }
            @Override
            public void mouseExited(MouseEvent e) {
                moreButton.setForeground(new Color(150, 150, 150));
                moreButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
            }
        });
        toolbarPanel.add(moreButton);

        // Loading indicator
        loadingLabel = new JLabel("");
        loadingLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        loadingLabel.setForeground(new Color(150, 150, 150));
        toolbarPanel.add(loadingLabel);

        loadingBar = new JProgressBar();
        loadingBar.setIndeterminate(true);
        loadingBar.setPreferredSize(new Dimension(20, 20));
        loadingBar.setForeground(new Color(0, 153, 153));
        loadingBar.setBorderPainted(false);
        loadingBar.setVisible(false);
        toolbarPanel.add(loadingBar);

        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.weighty = 0.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(toolbarPanel, gbc);

        // Attachments panel
        attachmentsPanel = new JPanel();
        attachmentsPanel.setBackground(Color.WHITE);
        attachmentsPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 5));
        attachmentsPanel.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));
        attachmentsPanel.setVisible(false);
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(attachmentsPanel, gbc);

        // Add form panel to main panel with scroll support
        JScrollPane formScrollPane = new JScrollPane(formPanel);
        formScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        formScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        formScrollPane.setBackground(new Color(245, 245, 245));
        formScrollPane.setBorder(null);
        mainPanel.add(formScrollPane, BorderLayout.CENTER);

        // Send button (FAB style)
        sendButton = jButton1;
        sendButton.setText("âœ‰ Send");
        sendButton.setFont(new Font("Segoe UI", Font.BOLD, 14));
        sendButton.setBackground(new Color(0, 153, 153));
        sendButton.setForeground(Color.WHITE);
        sendButton.setFocusPainted(false);
        sendButton.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        sendButton.setOpaque(true);
        sendButton.setBorderPainted(false);
        sendButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                if (!isSending) {
                    sendButton.setBackground(new Color(0, 180, 180));
                    sendButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
                    sendButton.setBounds(sendButton.getX() - 2, sendButton.getY() - 2,
                            sendButton.getWidth() + 4, sendButton.getHeight() + 4);
                }
            }
            @Override
            public void mouseExited(MouseEvent e) {
                if (!isSending) {
                    sendButton.setBackground(new Color(0, 153, 153));
                    sendButton.setBounds(sendButton.getX() + 2, sendButton.getY() + 2,
                            sendButton.getWidth() - 4, sendButton.getHeight() - 4);
                }
            }
        });

        JPanel sendPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        sendPanel.setBackground(new Color(245, 245, 245));
        sendPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 20));
        sendPanel.add(sendButton);
        mainPanel.add(sendPanel, BorderLayout.SOUTH);

        // Notification panel
        notificationPanel = new JPanel(new BorderLayout());
        notificationPanel.setBackground(new Color(245, 245, 245));
        notificationPanel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        notificationLabel = new JLabel("");
        notificationLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        notificationLabel.setForeground(new Color(0, 153, 153));
        notificationLabel.setHorizontalAlignment(SwingConstants.CENTER);
        notificationPanel.add(notificationLabel, BorderLayout.CENTER);
        notificationPanel.setVisible(false);
        mainPanel.add(notificationPanel, BorderLayout.SOUTH);
        mainPanel.remove(sendPanel); // Re-add sendPanel to ensure it's on top
        mainPanel.add(sendPanel, BorderLayout.SOUTH);

        // Animate the form load
        animateFormLoad();
    }

    private void attachFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select PDF or Image to Attach");
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "PDF & Images", "pdf", "jpg", "jpeg", "png", "gif");
        fileChooser.addChoosableFileFilter(filter);

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            // Check file size (Gmail limit: 25 MB)
            long fileSizeMB = selectedFile.length() / (1024 * 1024); // Convert to MB
            if (fileSizeMB > 25) {
                showNotification("File size exceeds 25 MB limit.", false);
                return;
            }

            // Add to attachments list
            attachments.add(selectedFile);
            updateAttachmentsPanel();
        }
    }

    private void updateAttachmentsPanel() {
        attachmentsPanel.removeAll();
        for (File file : attachments) {
            JPanel filePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));
            filePanel.setBackground(Color.WHITE);
            JLabel fileLabel = new JLabel(file.getName());
            fileLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
            fileLabel.setForeground(new Color(50, 50, 50));
            filePanel.add(fileLabel);

            JButton removeButton = new JButton("âœ–");
            removeButton.setFont(new Font("Segoe UI", Font.PLAIN, 12));
            removeButton.setForeground(new Color(150, 150, 150));
            removeButton.setBackground(Color.WHITE);
            removeButton.setBorder(BorderFactory.createEmptyBorder(2, 5, 2, 5));
            removeButton.setFocusPainted(false);
            removeButton.addActionListener(e -> {
                attachments.remove(file);
                updateAttachmentsPanel();
            });
            removeButton.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseEntered(MouseEvent e) {
                    removeButton.setForeground(new Color(255, 99, 71));
                }
                @Override
                public void mouseExited(MouseEvent e) {
                    removeButton.setForeground(new Color(150, 150, 150));
                }
            });
            filePanel.add(removeButton);
            attachmentsPanel.add(filePanel);
        }
        attachmentsPanel.setVisible(!attachments.isEmpty());
        formPanel.revalidate();
        formPanel.repaint();
    }

    private void animateFormLoad() {
        Component[] components = {
            formPanel.getComponent(0), // Email panel
            formPanel.getComponent(1), // Subject panel
            formPanel.getComponent(2), // Message text
            formPanel.getComponent(3), // Counter
            formPanel.getComponent(4), // Toolbar
            sendButton
        };
        for (Component comp : components) {
            comp.setVisible(false);
        }

        final int[] index = {0};
        new Timer(150, e -> {
            if (index[0] < components.length) {
                Component comp = components[index[0]];
                comp.setVisible(true);
                float[] alpha = {0f};
                Timer fadeTimer = new Timer(20, fadeEvent -> {
                    alpha[0] += 0.05f;
                    if (alpha[0] >= 1f) {
                        alpha[0] = 1f;
                        ((Timer) fadeEvent.getSource()).stop();
                    }
                    comp.repaint();
                });
                fadeTimer.start();
                mainPanel.revalidate();
                mainPanel.repaint();
                index[0]++;
            } else {
                ((Timer) e.getSource()).stop();
            }
        }).start();
    }

    private void updateMessageCounter() {
        String text = messageText.getText();
        if (text.equals("Enter your message...")) {
            text = "";
        }
        int length = text.length();
        messageCounterLabel.setText(length + "/500");
        if (length > 500) {
            messageCounterLabel.setForeground(new Color(255, 99, 71));
        } else {
            messageCounterLabel.setForeground(new Color(150, 150, 150));
        }
    }

    private void showLoadingIndicator(boolean show) {
        isSending = show;
        loadingLabel.setText(show ? "Sending..." : "");
        loadingBar.setVisible(show);
        sendButton.setEnabled(!show);
        draftButton.setEnabled(!show);
        attachButton.setEnabled(!show);
        if (show) {
            sendButton.setText("âœ‰ Sending...");
            sendButton.setBackground(new Color(150, 150, 150));
        } else {
            sendButton.setText("âœ‰ Send");
            sendButton.setBackground(new Color(0, 153, 153));
        }
        mainPanel.revalidate();
        mainPanel.repaint();
    }

    private void showNotification(String message, boolean isSuccess) {
        notificationLabel.setText(message);
        notificationLabel.setForeground(isSuccess ? new Color(0, 153, 153) : new Color(255, 99, 71));
        notificationPanel.setBackground(isSuccess ? new Color(0, 153, 153, 20) : new Color(255, 99, 71, 20));
        notificationPanel.setVisible(true);

        if (notificationFadeTimer != null) {
            notificationFadeTimer.stop();
        }
        float[] alpha = {1f};
        notificationFadeTimer = new Timer(50, e -> {
            alpha[0] -= 0.02f;
            if (alpha[0] <= 0f) {
                notificationPanel.setVisible(false);
                ((Timer) e.getSource()).stop();
            }
            notificationPanel.setBackground(new Color(
                notificationLabel.getForeground().getRed(),
                notificationLabel.getForeground().getGreen(),
                notificationLabel.getForeground().getBlue(),
                (int) (alpha[0] * 20)
            ));
            notificationLabel.setForeground(new Color(
                notificationLabel.getForeground().getRed(),
                notificationLabel.getForeground().getGreen(),
                notificationLabel.getForeground().getBlue(),
                (int) (alpha[0] * 255)
            ));
        });
        notificationFadeTimer.setInitialDelay(2000);
        notificationFadeTimer.start();
    }

    private void saveDraft() {
        String email = textEmail.getText().equals("Enter patient's email...") ? "" : textEmail.getText();
        String subject = textSubject.getText().equals("Enter email subject...") ? "" : textSubject.getText();
        String message = messageText.getText().equals("Enter your message...") ? "" : messageText.getText();

        if (email.isEmpty() && subject.isEmpty() && message.isEmpty() && attachments.isEmpty()) {
            showNotification("Nothing to save as draft.", false);
            return;
        }

        showNotification("Draft saved at " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")), true);
    }

    private void resetFormFields() {
        textEmail.setText("Enter patient's email...");
        textEmail.setForeground(new Color(150, 150, 150));
        textSubject.setText("Enter email subject...");
        textSubject.setForeground(new Color(150, 150, 150));
        messageText.setText("Enter your message...");
        messageText.setForeground(new Color(150, 150, 150));
        attachments.clear();
        updateAttachmentsPanel();
        updateMessageCounter();
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
String recipient = textEmail.getText();
        String subject = textSubject.getText();
        String messageBody = messageText.getText();

        if (recipient.equals("Enter patient's email...") || subject.equals("Enter email subject...") ||
            messageBody.equals("Enter your message...") || recipient.isEmpty() || subject.isEmpty() || messageBody.isEmpty()) {
            showNotification("All fields must be filled.", false);
            return;
        }

        if (messageBody.length() > 500) {
            showNotification("Message exceeds 500 characters.", false);
            return;
        }

        showLoadingIndicator(true);

        new Thread(() -> {
            try {
                sendEmail(recipient, subject, messageBody);
                SwingUtilities.invokeLater(() -> {
                    showNotification("Email sent successfully!", true);
                    resetFormFields();
                });
            } catch (MessagingException | IOException e) {
                SwingUtilities.invokeLater(() -> {
                    showNotification("Failed to send email: " + e.getMessage(), false);
                });
            } finally {
                SwingUtilities.invokeLater(() -> showLoadingIndicator(false));
            }
        }).start();
    }

    private void setupServerProperties() {
        Properties properties = new Properties();
        properties.put("mail.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");
        properties.put("mail.smtp.host", "smtp.gmail.com");
        properties.put("mail.smtp.port", "587");

        newSession = Session.getInstance(properties, new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication("Kinggucci195@Gmail.com", "ywjj pjvj cddf jccl");
            }
        });
    }

    private void sendEmail(String recipient, String subject, String messageBody) throws MessagingException, IOException {
        MimeMessage message = new MimeMessage(newSession);
        message.setFrom(new InternetAddress("Kinggucci195@Gmail.com"));
        message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));
        message.setSubject(subject);

        // Create a multipart message to handle text and attachments
        MimeMultipart multipart = new MimeMultipart();

        // Add the text message part
        MimeBodyPart textPart = new MimeBodyPart();
        textPart.setText(messageBody);
        multipart.addBodyPart(textPart);

        // Add attachments
        for (File file : attachments) {
            MimeBodyPart attachmentPart = new MimeBodyPart();
            attachmentPart.attachFile(file);
            multipart.addBodyPart(attachmentPart);
        }

        // Set the multipart content to the message
        message.setContent(multipart);

        // Send the message
        Transport.send(message);
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Email Sender");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 500);
        frame.add(new Form5());
        frame.setVisible(true);
    
    
            // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField MessageText;
    private javax.swing.JTextField TextEmail;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
