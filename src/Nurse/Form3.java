/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Nurse;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.FileReader;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
/**
 *
 * @author USER
 */
public class Form3 extends TransitionsForm {
private String nurseId;

       private String nurseName;
    private JLabel timeLabel;
    private JLabel welcomeLabel;
    private JPanel mainPanel;
    private JLabel apptCountLabel;
    private JLabel msgCountLabel;
    private JLabel billsCountLabel;
    private JTextField searchField;
    private JPanel apptListPanel;  // Store panels to update later
    private JPanel billingListPanel;  /**
     * Creates new form Form
     */
    public Form3() {
        initComponents();
        initDynamicComponents();
        
    }
   public void setNurseId(String nurseId) {
        this.nurseId = nurseId;
        System.out.println("Form3: setNurseId called with nurseId=" + nurseId);
        loadNurseData();
        updateNavCounts();
        loadAppointments(apptListPanel);  // Load data after nurseId is set
        loadBillingMessages(billingListPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 102, 102));
        setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
private void initDynamicComponents() {
        removeAll();
        setLayout(new BorderLayout());

        mainPanel = new JPanel();
        mainPanel.setBackground(new Color(245, 245, 245));
        mainPanel.setLayout(new BorderLayout());
        add(mainPanel, BorderLayout.CENTER);

        JPanel headerPanel = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g.create();
                g2d.setColor(new Color(171, 71, 188));
                g2d.fillRect(0, 0, getWidth(), getHeight());
                g2d.dispose();
            }
        };
        headerPanel.setOpaque(false);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        headerPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 60));
        mainPanel.add(headerPanel, BorderLayout.NORTH);

        JPanel logoPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));
        logoPanel.setOpaque(false);
        JLabel logoIcon = new JLabel();
        try {
            URL iconURL = getClass().getResource("/icons/NurseHome.png");
            if (iconURL != null) {
                logoIcon.setIcon(new ImageIcon(iconURL));
                System.out.println("Form3: Loaded NurseHome.png successfully");
            } else {
                System.err.println("Form3: Warning: /icons/NurseHome.png not found");
            }
        } catch (Exception e) {
            System.err.println("Form3: Error loading NurseHome.png: " + e.getMessage());
        }
        logoPanel.add(logoIcon);
        JLabel logoLabel = new JLabel("RxPert Clinic");
        logoLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));
        logoLabel.setForeground(Color.WHITE);
        logoPanel.add(logoLabel);
        headerPanel.add(logoPanel, BorderLayout.WEST);

        JPanel navPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 0));
        navPanel.setOpaque(false);
        String[] navItems = {"Appointments", "Billing", "Notification", "Mail"};
        for (String item : navItems) {
            JPanel navItemPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));
            navItemPanel.setOpaque(false);
            JLabel navLabel = new JLabel(item);
            navLabel.setFont(new Font("Segoe UI", Font.PLAIN, 16));
            navLabel.setForeground(Color.WHITE);
            JLabel countLabel = new JLabel("0");
            countLabel.setFont(new Font("Segoe UI", Font.BOLD, 12));
            countLabel.setForeground(Color.WHITE);
            countLabel.setHorizontalAlignment(SwingConstants.CENTER);
            countLabel.setPreferredSize(new Dimension(20, 20));
            countLabel.setOpaque(true);
            countLabel.setBackground(new Color(255, 0, 0));
            countLabel.setName(item + "Count");
            if (!item.equals("Appointments") && !item.equals("Billing")) {
                countLabel.setVisible(false);
            }
            navLabel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseEntered(MouseEvent e) {
                    navLabel.setForeground(new Color(206, 147, 216));
                }
                @Override
                public void mouseExited(MouseEvent e) {
                    navLabel.setForeground(Color.WHITE);
                }
                @Override
                public void mouseClicked(MouseEvent e) {
                    if ("Appointments".equals(item)) {
                        navigateToForm("Form");
                    } else if ("Billing".equals(item)) {
                        navigateToForm("Form2");
                    } else if ("Notification".equals(item)) {
                        JOptionPane.showMessageDialog(Form3.this, "Notifications not implemented yet.", "Notification", JOptionPane.INFORMATION_MESSAGE);
                    } else if ("Mail".equals(item)) {
                        JOptionPane.showMessageDialog(Form3.this, "Mail not implemented yet.", "Mail", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            });
            navItemPanel.add(navLabel);
            navItemPanel.add(countLabel);
            navPanel.add(navItemPanel);
        }
        headerPanel.add(navPanel, BorderLayout.CENTER);

        timeLabel = new JLabel(getCurrentTime());
        timeLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        timeLabel.setForeground(Color.WHITE);
        timeLabel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));
        headerPanel.add(timeLabel, BorderLayout.EAST);

        JPanel contentPanel = new JPanel(new GridBagLayout());
        contentPanel.setOpaque(false);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 20, 10, 20);
        gbc.anchor = GridBagConstraints.WEST;

        welcomeLabel = new JLabel("Welcome, Nurse!");
        welcomeLabel.setFont(new Font("Segoe UI", Font.BOLD, 36));
        welcomeLabel.setForeground(Color.BLACK);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPanel.add(welcomeLabel, gbc);

        searchField = new JTextField("Search");
        searchField.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        searchField.setForeground(Color.GRAY);
        searchField.setPreferredSize(new Dimension(250, 40));
        searchField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(Color.LIGHT_GRAY),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        searchField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (searchField.getText().equals("Search")) {
                    searchField.setText("");
                    searchField.setForeground(Color.BLACK);
                }
            }
            @Override
            public void focusLost(FocusEvent e) {
                if (searchField.getText().isEmpty()) {
                    searchField.setText("Search");
                    searchField.setForeground(Color.GRAY);
                }
            }
        });
        searchField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    performSearch();
                }
            }
        });
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPanel.add(searchField, gbc);

        JPanel mainContentPanel = new JPanel(new GridBagLayout());
        mainContentPanel.setOpaque(false);
        GridBagConstraints contentGbc = new GridBagConstraints();
        contentGbc.insets = new Insets(5, 5, 5, 5);
        contentGbc.fill = GridBagConstraints.BOTH;
        contentGbc.weightx = 1.0;
        contentGbc.weighty = 1.0;

        JPanel apptPanel = new JPanel(new BorderLayout());
        apptPanel.setBackground(Color.WHITE);
        apptPanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        apptPanel.setPreferredSize(new Dimension(200, 200));
        JLabel apptTitle = new JLabel("Today's Appointments");
        apptTitle.setFont(new Font("Segoe UI", Font.BOLD, 14));
        apptTitle.setBorder(BorderFactory.createEmptyBorder(10, 10, 5, 10));
        apptPanel.add(apptTitle, BorderLayout.NORTH);
        apptListPanel = new JPanel();
        apptListPanel.setLayout(new BoxLayout(apptListPanel, BoxLayout.Y_AXIS));
        apptListPanel.setOpaque(false);
        JScrollPane apptScrollPane = new JScrollPane(apptListPanel);
        apptScrollPane.setBorder(null);
        apptPanel.add(apptScrollPane, BorderLayout.CENTER);
        contentGbc.gridx = 0;
        contentGbc.gridy = 0;
        contentGbc.weightx = 0.3;
        mainContentPanel.add(apptPanel, contentGbc);

        JPanel billingPanel = new JPanel(new BorderLayout());
        billingPanel.setBackground(Color.WHITE);
        billingPanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        billingPanel.setPreferredSize(new Dimension(200, 200));
        JLabel billingTitle = new JLabel("Billing");
        billingTitle.setFont(new Font("Segoe UI", Font.BOLD, 14));
        billingTitle.setBorder(BorderFactory.createEmptyBorder(10, 10, 5, 10));
        billingPanel.add(billingTitle, BorderLayout.NORTH);
        billingListPanel = new JPanel();
        billingListPanel.setLayout(new BoxLayout(billingListPanel, BoxLayout.Y_AXIS));
        billingListPanel.setOpaque(false);
        JScrollPane billingScrollPane = new JScrollPane(billingListPanel);
        billingScrollPane.setBorder(null);
        billingPanel.add(billingScrollPane, BorderLayout.CENTER);
        billingPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                navigateToForm("Form2");
            }
        });
        billingPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        contentGbc.gridx = 1;
        contentGbc.gridy = 0;
        contentGbc.weightx = 0.3;
        mainContentPanel.add(billingPanel, contentGbc);

        JPanel messagesPanel = new JPanel(new BorderLayout());
        messagesPanel.setBackground(Color.WHITE);
        messagesPanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        messagesPanel.setPreferredSize(new Dimension(200, 200));
        JLabel messagesTitle = new JLabel("Recent Messages");
        messagesTitle.setFont(new Font("Segoe UI", Font.BOLD, 14));
        messagesTitle.setBorder(BorderFactory.createEmptyBorder(10, 10, 5, 10));
        messagesPanel.add(messagesTitle, BorderLayout.NORTH);
        JPanel messagesListPanel = new JPanel();
        messagesListPanel.setLayout(new BoxLayout(messagesListPanel, BoxLayout.Y_AXIS));
        messagesListPanel.setOpaque(false);
        JScrollPane messagesScrollPane = new JScrollPane(messagesListPanel);
        messagesScrollPane.setBorder(null);
        messagesPanel.add(messagesScrollPane, BorderLayout.CENTER);
        contentGbc.gridx = 2;
        contentGbc.gridy = 0;
        contentGbc.weightx = 0.3;
        mainContentPanel.add(messagesPanel, contentGbc);

        JPanel nurseIconPanel = new JPanel(new BorderLayout());
        nurseIconPanel.setOpaque(false);
        JLabel nurseIconLabel = new JLabel();
        try {
            URL iconURL = getClass().getResource("/icons/nurse_iconnew.png");
            if (iconURL != null) {
                ImageIcon icon = new ImageIcon(iconURL);
                int originalWidth = icon.getIconWidth();
                int originalHeight = icon.getIconHeight();
                System.out.println("Form3: Loaded nurse_iconnew.png successfully, dimensions: " + originalWidth + "x" + originalHeight);

                // Target size: fit within 200x200 while preserving aspect ratio
                int targetSize = 200;
                int newWidth, newHeight;
                if (originalWidth > originalHeight) {
                    newWidth = targetSize;
                    newHeight = (int) (targetSize * ((double) originalHeight / originalWidth));
                } else {
                    newHeight = targetSize;
                    newWidth = (int) (targetSize * ((double) originalWidth / originalHeight));
                }

                Image scaledImage = icon.getImage().getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
                nurseIconLabel.setIcon(new ImageIcon(scaledImage));
                System.out.println("Form3: Scaled nurse_iconnew.png to " + newWidth + "x" + newHeight);
            } else {
                System.err.println("Form3: Warning: /icons/nurse_iconnew.png not found");
                nurseIconLabel.setText("[Nurse Icon]");
            }
        } catch (Exception e) {
            System.err.println("Form3: Error loading nurse_iconnew.png: " + e.getMessage());
            nurseIconLabel.setText("[Nurse Icon]");
        }
        nurseIconPanel.add(nurseIconLabel, BorderLayout.CENTER);
        contentGbc.gridx = 3;
        contentGbc.gridy = 0;
        contentGbc.weightx = 0.2;
        contentGbc.ipadx = 20;
        contentGbc.ipady = 20;
        mainContentPanel.add(nurseIconPanel, contentGbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPanel.add(mainContentPanel, gbc);

        mainPanel.add(contentPanel, BorderLayout.CENTER);

        new Timer(1000, e -> timeLabel.setText(getCurrentTime())).start();

        loadRecentMessages(messagesListPanel);

        mainPanel.revalidate();
        mainPanel.repaint();
    }

    private void loadAppointments(JPanel apptListPanel) {
        if (apptListPanel == null) {
            System.err.println("Form3: apptListPanel is null in loadAppointments");
            return;
        }
        apptListPanel.removeAll();
        if (nurseId == null) {
            System.err.println("Form3: nurseId is null in loadAppointments");
            JLabel errorLabel = new JLabel("Nurse ID not set");
            errorLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
            apptListPanel.add(errorLabel);
            apptListPanel.revalidate();
            apptListPanel.repaint();
            return;
        }

        try {
            JSONParser parser = new JSONParser();
            String appointmentsJsonPath = "C:\\Users\\USER\\Downloads\\MAEClinicApp updated\\MAEClinicApp\\src\\maeclinicapp\\appointments.json";
            FileReader apptReader = new FileReader(appointmentsJsonPath);
            JSONObject appointmentsJson = (JSONObject) parser.parse(apptReader);
            JSONArray appointments = (JSONArray) appointmentsJson.get("appointments");

            DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyyMMddHHmm");
            DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("h:mm a");
            LocalDateTime today = LocalDateTime.now();
            String todayDateStr = today.format(DateTimeFormatter.ofPattern("yyyyMMdd"));

            boolean hasAppointments = false;
            for (Object obj : appointments) {
                JSONObject appt = (JSONObject) obj;
                String apptNurseId = (String) appt.get("nurseId");
                String date = (String) appt.get("appointmentTime");
                if (nurseId.equals(apptNurseId)) {
                    try {
                        LocalDateTime dateTime = LocalDateTime.parse(date, inputFormatter);
                        String apptDateStr = dateTime.format(DateTimeFormatter.ofPattern("yyyyMMdd"));
                        if (apptDateStr.equals(todayDateStr)) {
                            String patientName = (String) appt.get("patientName");
                            String formattedTime = dateTime.format(outputFormatter);

                            JPanel apptEntry = new JPanel(new FlowLayout(FlowLayout.LEFT));
                            apptEntry.setOpaque(false);
                            JLabel nameLabel = new JLabel(patientName);
                            nameLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
                            apptEntry.add(nameLabel);
                            JLabel timeLabel = new JLabel(formattedTime);
                            timeLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
                            timeLabel.setForeground(Color.GRAY);
                            apptEntry.add(timeLabel);
                            apptEntry.addMouseListener(new MouseAdapter() {
                                @Override
                                public void mouseClicked(MouseEvent e) {
                                    navigateToForm("Form");
                                }
                            });
                            apptEntry.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                            apptListPanel.add(apptEntry);
                            hasAppointments = true;
                        }
                    } catch (Exception e) {
                        System.err.println("Form3: Error parsing appointment date for " + appt.toJSONString() + ": " + e.getMessage());
                        continue;
                    }
                }
            }

            if (!hasAppointments) {
                JLabel noApptLabel = new JLabel("No appointments today");
                noApptLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
                apptListPanel.add(noApptLabel);
            }
        } catch (Exception e) {
            System.err.println("Form3: Error loading appointments: " + e.getMessage());
            JLabel errorLabel = new JLabel("Error loading appointments");
            errorLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
            apptListPanel.add(errorLabel);
        }
        apptListPanel.revalidate();
        apptListPanel.repaint();
    }

    private void loadBillingMessages(JPanel billingListPanel) {
        if (billingListPanel == null) {
            System.err.println("Form3: billingListPanel is null in loadBillingMessages");
            return;
        }
        billingListPanel.removeAll();
        if (nurseId == null) {
            System.err.println("Form3: nurseId is null in loadBillingMessages");
            JLabel errorLabel = new JLabel("Nurse ID not set");
            errorLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
            billingListPanel.add(errorLabel);
            billingListPanel.revalidate();
            billingListPanel.repaint();
            return;
        }

        try {
            JSONParser parser = new JSONParser();
            String billsJsonPath = "C:\\Users\\najx\\Downloads\\RxPert\\RxPert\\src\\maeclinicapp\\bills.json";
            FileReader billReader = new FileReader(billsJsonPath);
            JSONObject billsJson = (JSONObject) parser.parse(billReader);
            JSONArray bills = (JSONArray) billsJson.get("bills");

            boolean hasBills = false;
            for (Object obj : bills) {
                JSONObject bill = (JSONObject) obj;
                String billNurseId = (String) bill.get("nurseId");
                String status = (String) bill.get("status");
                if (nurseId.equals(billNurseId) && "unpaid".equalsIgnoreCase(status)) {
                    String patientName = (String) bill.get("patientName");
                    String amount = bill.get("amount").toString();

                    JPanel billEntry = new JPanel(new BorderLayout());
                    billEntry.setOpaque(false);
                    JLabel sourceLabel = new JLabel("Bill for " + patientName);
                    sourceLabel.setFont(new Font("Segoe UI", Font.BOLD, 12));
                    billEntry.add(sourceLabel, BorderLayout.NORTH);
                    JLabel messageLabel = new JLabel("Amount: $" + amount);
                    messageLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
                    billEntry.add(messageLabel, BorderLayout.CENTER);
                    billEntry.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
                    billingListPanel.add(billEntry);
                    hasBills = true;
                }
            }

            if (!hasBills) {
                JLabel noBillsLabel = new JLabel("No unpaid bills");
                noBillsLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
                billingListPanel.add(noBillsLabel);
            }
        } catch (Exception e) {
            System.err.println("Form3: Error loading billing messages: " + e.getMessage());
            JLabel errorLabel = new JLabel("Error loading billing messages");
            errorLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
            billingListPanel.add(errorLabel);
        }
        billingListPanel.revalidate();
        billingListPanel.repaint();
    }

    private void loadRecentMessages(JPanel messagesListPanel) {
        String[][] messages = {
            {"Dr. Patel", "Can you prepare the discharge papers for Room 203? Patient is good to go.", "Yesterday"},
            {"Nurse Thompson", "I've completed the medication", "Yesterday"}
        };

        for (String[] message : messages) {
            JPanel messageEntry = new JPanel(new BorderLayout());
            messageEntry.setOpaque(false);
            JLabel sourceLabel = new JLabel(message[0]);
            sourceLabel.setFont(new Font("Segoe UI", Font.BOLD, 12));
            messageEntry.add(sourceLabel, BorderLayout.NORTH);
            JLabel messageLabel = new JLabel("<html>" + message[1] + "</html>");
            messageLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
            messageEntry.add(messageLabel, BorderLayout.CENTER);
            JLabel timeLabel = new JLabel(message[2]);
            timeLabel.setFont(new Font("Segoe UI", Font.PLAIN, 10));
            timeLabel.setForeground(Color.GRAY);
            messageEntry.add(timeLabel, BorderLayout.EAST);
            messageEntry.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
            messagesListPanel.add(messageEntry);
        }
    }

    private void performSearch() {
        String query = searchField.getText().trim().toLowerCase();
        if (query.isEmpty() || query.equals("search")) {
            JOptionPane.showMessageDialog(this, "Please enter a search term.", "Search", JOptionPane.WARNING_MESSAGE);
            return;
        }

        java.util.List<String> results = new java.util.ArrayList<>();
        try {
            JSONParser parser = new JSONParser();

            String appointmentsJsonPath = "C:\\Users\\najx\\Downloads\\RxPert\\RxPert\\src\\maeclinicapp\\appointments.json";
            FileReader apptReader = new FileReader(appointmentsJsonPath);
            JSONObject appointmentsJson = (JSONObject) parser.parse(apptReader);
            JSONArray appointments = (JSONArray) appointmentsJson.get("appointments");
            for (Object obj : appointments) {
                JSONObject appt = (JSONObject) obj;
                String patientName = ((String) appt.get("patientName")).toLowerCase();
                String patientId = ((String) appt.get("patientId")).toLowerCase();
                String apptNurseId = (String) appt.get("nurseId");
                if (nurseId.equals(apptNurseId) && (patientName.contains(query) || patientId.contains(query))) {
                    results.add("Appointment: " + appt.get("patientName") + " (ID: " + appt.get("patientId") + ") on " + appt.get("appointmentTime"));
                }
            }

            String billsJsonPath = "C:\\Users\\najx\\Downloads\\RxPert\\RxPert\\src\\maeclinicapp\\bills.json";
            FileReader billReader = new FileReader(billsJsonPath);
            JSONObject billsJson = (JSONObject) parser.parse(billReader);
            JSONArray bills = (JSONArray) billsJson.get("bills");
            for (Object obj : bills) {
                JSONObject bill = (JSONObject) obj;
                String patientName = ((String) bill.get("patientName")).toLowerCase();
                String patientId = ((String) bill.get("patientId")).toLowerCase();
                String billNurseId = (String) bill.get("nurseId");
                if (nurseId.equals(billNurseId) && (patientName.contains(query) || patientId.contains(query))) {
                    results.add("Bill: " + bill.get("patientName") + " (ID: " + bill.get("patientId") + ") - $" + bill.get("amount") + " (" + bill.get("status") + ")");
                }
            }
        } catch (Exception e) {
            System.err.println("Form3: Error performing search: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error performing search: " + e.getMessage(), "Search Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (results.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No results found for \"" + query + "\".", "Search Results", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        JDialog resultsDialog = new JDialog(SwingUtilities.getWindowAncestor(this), "Search Results", Dialog.ModalityType.APPLICATION_MODAL);
        resultsDialog.setLayout(new BorderLayout());
        JList<String> resultsList = new JList<>(results.toArray(new String[0]));
        resultsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        resultsList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    String selected = resultsList.getSelectedValue();
                    if (selected.startsWith("Appointment")) {
                        navigateToForm("Form");
                    } else if (selected.startsWith("Bill")) {
                        navigateToForm("Form2");
                    }
                    resultsDialog.dispose();
                }
            }
        });
        resultsDialog.add(new JScrollPane(resultsList), BorderLayout.CENTER);
        JButton closeButton = new JButton("Close");
        closeButton.addActionListener(e -> resultsDialog.dispose());
        resultsDialog.add(closeButton, BorderLayout.SOUTH);
        resultsDialog.setSize(400, 300);
        resultsDialog.setLocationRelativeTo(this);
        resultsDialog.setVisible(true);
    }

    private void loadNurseData() {
        try {
            JSONParser parser = new JSONParser();
            String nurseJsonPath = "C:\\Users\\najx\\Downloads\\RxPert\\RxPert\\src\\maeclinicapp\\nurse.json";
            System.out.println("Form3: Loading nurse.json from " + nurseJsonPath);
            FileReader reader = new FileReader(nurseJsonPath);
            JSONArray nurses = (JSONArray) parser.parse(reader);
            for (Object obj : nurses) {
                JSONObject nurse = (JSONObject) obj;
                String id = (String) nurse.get("id");
                System.out.println("Form3: Checking nurse id=" + id + ", nurseId=" + nurseId);
                if (nurseId != null && nurseId.equals(id)) {
                    nurseName = (String) nurse.get("username");
                    System.out.println("Form3: Found nurse, username=" + nurseName);
                    welcomeLabel.setText("Welcome, " + nurseName + "!");
                    return;
                }
            }
            System.err.println("Form3: No nurse found for nurseId=" + nurseId);
            welcomeLabel.setText("Welcome, Nurse!");
        } catch (Exception e) {
            System.err.println("Form3: Error loading nurse data: " + e.getMessage());
            e.printStackTrace();
            welcomeLabel.setText("Welcome, Nurse!");
        }
    }

    private void updateNavCounts() {
        System.out.println("Form3: nurseId in updateNavCounts=" + nurseId);
        try {
            if (nurseId == null) {
                System.err.println("Form3: nurseId is null in updateNavCounts");
                return;
            }
            JSONParser parser = new JSONParser();

            String appointmentsJsonPath = "C:\\Users\\najx\\Downloads\\RxPert\\RxPert\\src\\maeclinicapp\\appointments.json";
            System.out.println("Form3: Loading appointments.json from " + appointmentsJsonPath);
            FileReader apptReader = new FileReader(appointmentsJsonPath);
            JSONObject appointmentsJson = (JSONObject) parser.parse(apptReader);
            JSONArray appointments = (JSONArray) appointmentsJson.get("appointments");
            int appointmentCount = 0;
            for (Object obj : appointments) {
                JSONObject appt = (JSONObject) obj;
                String apptNurseId = (String) appt.get("nurseId");
                System.out.println("Form3: Checking appointment: nurseId=" + apptNurseId);
                if (nurseId.equals(apptNurseId)) {
                    appointmentCount++;
                }
            }
            System.out.println("Form3: Appointment count for nurseId " + nurseId + ": " + appointmentCount);

            String billsJsonPath = "C:\\Users\\najx\\Downloads\\RxPert\\RxPert\\src\\maeclinicapp\\bills.json";
            System.out.println("Form3: Loading bills.json from " + billsJsonPath);
            FileReader billReader = new FileReader(billsJsonPath);
            JSONObject billsJson = (JSONObject) parser.parse(billReader);
            JSONArray bills = (JSONArray) billsJson.get("bills");
            int billCount = 0;
            for (Object obj : bills) {
                JSONObject bill = (JSONObject) obj;
                String billNurseId = (String) bill.get("nurseId");
                String status = (String) bill.get("status");
                System.out.println("Form3: Checking bill: nurseId=" + billNurseId + ", status=" + status);
                if (nurseId.equals(billNurseId) && "unpaid".equalsIgnoreCase(status)) {
                    billCount++;
                }
            }
            System.out.println("Form3: Bill count for nurseId " + nurseId + ": " + billCount);

            Component[] navComponents = ((JPanel) ((JPanel) mainPanel.getComponent(0)).getComponent(1)).getComponents();
            for (Component navItem : navComponents) {
                if (navItem instanceof JPanel) {
                    Component[] items = ((JPanel) navItem).getComponents();
                    for (Component item : items) {
                        if (item instanceof JLabel && item.getName() != null) {
                            if ("AppointmentsCount".equals(item.getName())) {
                                ((JLabel) item).setText(String.valueOf(appointmentCount));
                                item.setVisible(appointmentCount > 0);
                                System.out.println("Form3: Updated Appointments count to " + appointmentCount);
                            } else if ("BillingCount".equals(item.getName())) {
                                ((JLabel) item).setText(String.valueOf(billCount));
                                item.setVisible(billCount > 0);
                                System.out.println("Form3: Updated Billing count to " + billCount);
                            }
                        }
                    }
                }
            }

            mainPanel.revalidate();
            mainPanel.repaint();
        } catch (Exception e) {
            System.err.println("Form3: Error updating nav counts: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void navigateToForm(String formName) {
        SwingUtilities.invokeLater(() -> {
            Container parent = getParent();
            while (parent != null && !(parent instanceof nurseDashboard)) {
                parent = parent.getParent();
            }
            if (parent instanceof nurseDashboard) {
                System.out.println("Form3: Navigating to form: " + formName);
                ((nurseDashboard) parent).navigateToForm(formName);
            } else {
                System.err.println("Form3: Error: Could not find nurseDashboard parent for navigation to " + formName);
            }
        });
    }

    private String getCurrentTime() {
        return LocalDateTime.now().format(DateTimeFormatter.ofPattern("EEE, MMM d, yyyy, h:mm a"));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
