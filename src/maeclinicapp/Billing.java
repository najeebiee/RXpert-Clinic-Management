/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package maeclinicapp;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import javax.swing.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
/**
 *
 * @author USER
 */
public class Billing extends javax.swing.JPanel {
  private static final String PATIENT_FILE = "C:\\Users\\USER\\Downloads\\MAEClinicApp updated\\MAEClinicApp\\src\\maeclinicapp\\patient.json";
    private static final String NURSE_FILE = "C:\\Users\\USER\\Downloads\\MAEClinicApp updated\\MAEClinicApp\\src\\maeclinicapp\\nurse.json";
    private static final String BILLS_FILE = "C:\\Users\\USER\\Downloads\\MAEClinicApp updated\\MAEClinicApp\\src\\Content\\bills.json";
    /**
     * Creates new form Billing
     */
    public Billing() {
        initComponents();
        loadPatients();
        loadNurses();
        loadServices();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Billing = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        Billing.setText("Billing");

        jLabel1.setText("Select Patient");

        jLabel2.setText("Select Nurse");

        jLabel3.setText("Services");

        jLabel4.setText("Amount:");

        jTextField1.setColumns(10);

        jButton1.setText("Create Bill");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(Billing, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(92, 92, 92)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, 216, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(260, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Billing, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
    }// </editor-fold>//GEN-END:initComponents
private void loadPatients() {
        try {
            JSONParser parser = new JSONParser();
            try (FileReader reader = new FileReader(PATIENT_FILE)) {
                JSONObject patientsJson = (JSONObject) parser.parse(reader);
                JSONArray patientList = (JSONArray) patientsJson.get("patientList");
                jComboBox1.removeAllItems();
                for (Object obj : patientList) {
                    JSONObject patient = (JSONObject) obj;
                    jComboBox1.addItem((String) patient.get("name"));
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading patients: " + e.getMessage());
        }
    }

    private void loadNurses() {
        try {
            JSONParser parser = new JSONParser();
            try (FileReader reader = new FileReader(NURSE_FILE)) {
                JSONArray usersList = (JSONArray) parser.parse(reader);
                jComboBox2.removeAllItems();
                for (Object obj : usersList) {
                    JSONObject user = (JSONObject) obj;
                    if ("nurse".equals(user.get("role"))) {
                        jComboBox2.addItem((String) user.get("username"));
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading nurses: " + e.getMessage());
        }
    }

    private void loadServices() {
        jComboBox3.removeAllItems();
        jComboBox3.addItem("Consultation");
        jComboBox3.addItem("Diagnostic Tests");
        jComboBox3.addItem("Miscellaneous");
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      String patientSelection = (String) jComboBox1.getSelectedItem();
        String nurseSelection = (String) jComboBox2.getSelectedItem();
        String services = (String) jComboBox3.getSelectedItem();
        String amount = jTextField1.getText().trim();

        // Validation: Check if all fields are filled
        if (patientSelection == null || nurseSelection == null || services == null || amount.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields.");
            return;
        }

        // Get patient and nurse IDs
        String patientId = getPatientId(patientSelection);
        String nurseId = getNurseId(nurseSelection);
        if (patientId == null || nurseId == null) {
            JOptionPane.showMessageDialog(this, "Error retrieving IDs.");
            return;
        }

        try {
            // Validate amount
            double amountValue = Double.parseDouble(amount);
            if (amountValue <= 0) {
                JOptionPane.showMessageDialog(this, "Amount must be positive.");
                return;
            }

            // Load or initialize bills.json
            JSONObject billsJson;
            JSONParser parser = new JSONParser();
            try (FileReader reader = new FileReader(BILLS_FILE)) {
                billsJson = (JSONObject) parser.parse(reader);
            } catch (IOException e) {
                billsJson = new JSONObject();
                billsJson.put("bills", new JSONArray());
            }

            // Add new bill with patientName and nurseName
            JSONArray bills = (JSONArray) billsJson.getOrDefault("bills", new JSONArray());
            JSONObject bill = new JSONObject();
            bill.put("billId", String.valueOf(bills.size() + 1));
            bill.put("patientId", patientId);
            bill.put("patientName", patientSelection); // Add patient name
            bill.put("nurseId", nurseId);
            bill.put("nurseName", nurseSelection); // Add nurse name
            bill.put("services", services);
            bill.put("amount", amountValue);
            bill.put("status", "unpaid");
            bill.put("date", LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmm")));
            bills.add(bill);
            billsJson.put("bills", bills);

            // Save to bills.json
            try (FileWriter writer = new FileWriter(BILLS_FILE)) {
                writer.write(billsJson.toJSONString());
                writer.flush();
            }

            JOptionPane.showMessageDialog(this, "Bill created successfully!");
            jTextField1.setText(""); // Clear the amount field
            jComboBox3.setSelectedIndex(0); // Reset services to first option
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid amount format.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error creating bill: " + e.getMessage());
        }
    }

    private String getPatientId(String patientName) {
        try {
            JSONParser parser = new JSONParser();
            try (FileReader reader = new FileReader(PATIENT_FILE)) {
                JSONObject patientsJson = (JSONObject) parser.parse(reader);
                JSONArray patientList = (JSONArray) patientsJson.get("patientList");
                for (Object obj : patientList) {
                    JSONObject patient = (JSONObject) obj;
                    if (patient.get("name").equals(patientName)) {
                        return (String) patient.get("id");
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error retrieving patient ID: " + e.getMessage());
        }
        return null;
    }

    private String getNurseId(String nurseUsername) {
        try {
            JSONParser parser = new JSONParser();
            try (FileReader reader = new FileReader(NURSE_FILE)) {
                JSONArray usersList = (JSONArray) parser.parse(reader);
                for (Object obj : usersList) {
                    JSONObject user = (JSONObject) obj;
                    if (user.get("username").equals(nurseUsername) && "nurse".equals(user.get("role"))) {
                        return (String) user.get("id");
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error retrieving nurse ID: " + e.getMessage());
        }
        return null;
    
      // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Billing;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
